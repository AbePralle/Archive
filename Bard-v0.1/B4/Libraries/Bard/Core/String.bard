class String [native functional]
  SETTINGS
    consolidation_table = Table<<String,String>>()

  METHODS
    method create [native]

    method create( bytes:Byte[] ) [native]

    method create( characters:Character[] ) [native]

      #{
    method consolidated->String
      local existing = consolidation_table[this]
      if (existing?) return existing

      local result = clone  # convert StringBuilder into String if need be
      consolidation_table[result] = result
      return result
      }#

    method after_first( ch:Character )->String
      local i = find( ch )
      if (i == -1) return ""
      return substring( i+1 )

    method after_first( st:String )->String
      local i = find( st )
      if (i == -1) return ""
      return substring( i+st.count )

    method before_first( ch:Character )->String
      local i = find( ch )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_first( st:String )->String
      local i = find( st )
      if (i == -1) return this
      return substring( 0, i-1 )

    method begins_with( ch:Character )->Logical
      return (count? and this[0] == ch)

    method begins_with( other:String )->Logical
      local other_count = other.count
      return (count >= other_count and substring_equals(0,other_count-1,other))

    method compare_to( other:String )->Integer
      if (this is other) return 0

      local limit = other.count
      if (this.count < limit) limit = this.count

      local i = 0
      while (i < limit)
        local ch1 = this[i]
        local ch2 = other[i]
        if (ch1 != ch2)
          if (ch1 < ch2) return -1
          else           return  1
        endIf
        ++i
      endWhile

      if (this.count == other.count) return 0

      if (this.count < other.count) return -1
      return 1

    method clone->String
      return this  # base strings are immutable

    method contains( ch:Character )->Logical
      return (find(ch) != -1)

    method contains( substr:String )->Logical
      return (find(substr) != -1)

    method count->Integer [native]

    method equals( other:Object )->Logical
      return equals( other as String )

    method equals( other:String )->Logical
      return compare_to(other) == 0

    method ends_with( ch:Character )->Logical
      local this_count = count
      return (this_count? and this[this_count-1] == ch)

    method ends_with( other:String )->Logical
      local this_count = count
      local other_count = other.count
      if (other_count > this_count) return false
      return substring_equals( this_count-other_count, this_count-1, other )

    method find( ch:Character )->Integer
      return find( ch, 0 )

    method find( ch:Character, i1:Integer )->Integer
      local i = i1
      local len = count
      while (i < len)
        if (this[i] == ch) return i
        ++i
      endWhile
      return -1

    method find( other:String )->Integer
      return find( other, 0 )

    method find( other:String, i1:Integer )->Integer
      local other_count = other.count
      if (other_count == 0) return -1
      if (other_count > count) return -1
      local i = i1
      local limit = (count - other_count) + 1
      local first_ch = other[0]
      while (i < limit)
        if (first_ch == this[i] and this.substring_equals(i,i+(other_count-1),other)) return i
        ++i
      endWhile
      return -1

    method find_last( ch:Character )->Integer
      return find_last( ch, count-1 )

    method find_last( ch:Character, starting_index:Integer )->Integer
      local i = starting_index
      while (i >= 0)
        if (this[i] == ch) return i
        --i
      endWhile
      return -1

    method find_last( other:String )->Integer
      return find_last( other, count-other.count )

    method find_last( other:String, starting_index:Integer )->Integer
      local i = starting_index
      local end_offset = other.count - 1
      while (i >= 0)
        if (substring_equals(i,i+end_offset,other)) return i
        --i
      endWhile
      return -1

    method from_first( ch:Character )->String
      local i = find( ch )
      if (i == -1) return ""
      return substring( i )

    method from_first( st:String )->String
      local i = find( st )
      if (i == -1) return ""
      return substring( i )

    method get( index:Integer )->Character [native]

    method hash_code->Integer [native]

    method leftmost( n:Integer )->String
      if (n >= 0) return substring( 0, n-1 )
      else        return substring( 0, (count + n) - 1 )

    method operator+=( rhs:String )->String
      if (rhs is null) rhs = "null"
      return StringBuilder( count + rhs.count ).print(this).print(rhs)->String

    method operator*=( copies:Integer )->String
      return this * copies

    method operator*( lhs:String, copies:Integer )->String
      if (lhs is null) lhs = "null"
      if (copies == 0) return ""
      if (copies == 1) return lhs

      local buffer = StringBuilder( lhs.count * copies )
      local i = copies
      while (i >= 1)
        buffer.print( lhs )
        --i
      endWhile

      return buffer->String

    method print( value:Integer )->String
      # Temporary kludge
      return StringBuilder(count+11).print(this).print(value)->String

    method print( value:Logical )->String
      # Temporary kludge
      return StringBuilder(count+5).print(this).print(value)->String

    method print( value:Real )->String
      # Temporary kludge
      return StringBuilder(count+11).print(this).print(value)->String

    method print( other:Object )->String
      # Temporary kludge
      if (other is null) return "null"
      else return print( other->String )

    method print( other:String )->String
      # Temporary kludge
      if (other is null) other = "null"
      return StringBuilder(count+other.count).print(this).print(other)->String

    method reversed->String
      local result = StringBuilder(count).print( this )
      result.reverse
      return result->String

    method rightmost( n:Integer )->String
      local this_count = count
      if (n < 0) return substring( -n, this_count-1 )
      else       return substring( this_count-n, this_count-1 )

    method split( separator:Character )->String[]
      local result = String[]

      local i1 = 0
      local i2 = find( separator, i1 )
      while (i2 != -1)
        result.add( substring(i1,i2-1) )
        i1 = i2 + 1
        i2 = find( separator, i1 )
      endWhile

      result.add( substring(i1) )

      return result

    method substring( i1:Integer )->String
      return substring( i1, count-1 )

    method substring( i1:Integer, i2:Integer )->String
      local this_count = count
      if (i1 < 0)    i1 = 0
      if (i2 >= this_count) i2 = this_count - 1
      if (i1 > i2) return ""

      if (i1 == 0 and i2 == this_count-1) return this

      local result = StringBuilder( (i2+1) - i1 )
      local i = i1
      while (i <= i2)
        result.print( this[i] )
        ++i
      endWhile

      return result->String

    method substring_equals( i1:Integer, i2:Integer, other:String )->Logical
      local other_count = other.count
      local this_count = count
      if (i1 < 0)    i1 = 0
      if (i2 >= this_count) i2 = this_count - 1
      if (i1 > i2) return (other.count == 0)

      local span = (i2 - i1) + 1
      if (other_count != span) return false

      local j = 0
      while (j < span)
        if (this[i1+j] != other[j]) return false
        ++j
      endWhile

      return true

    method to->String
      return this

    method to->Integer
      local result = 0
      local exp = count - 1
      forEach(digit in this)
        local actual_digit = digit->Integer - '0'->Integer
        result += actual_digit*(10^exp)
        --exp
      endForEach

      return result

    method to_uppercase->String
      local found_lc = false
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'z') found_lc = true; escapeForEach
      endForEach
      if (not found_lc) return this

      local result = StringBuilder(count)
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'z') result.print( (ch+('A'-'a'))->Character )
        else                         result.print( ch )
      endForEach

      return result->String

    method to_lowercase->String
      local found_uc = false
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') found_uc = true; escapeForEach
      endForEach
      if (not found_uc) return this

      local result = StringBuilder(count)
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') result.print( (ch+('a'-'A'))->Character )
        else                         result.print( ch )
      endForEach

      return result->String

    method trim->String
      local i1 = 0
      local i2 = count - 1

      while (i1 <= i2 and this[i1] <= 32) ++i1
      while (i1 <= i2 and this[i2] <= 32) --i2

      if (i1 > i2) return ""
      if (i1 == 0 and i2 == count-1) return this
      return substring(i1,i2)

      #{
    method format( stack:DataStack )->String
      local output = StringBuilder()

      local curr_stack_index = 0
      local control          = '~'
      local align_right      = true
      local zero_fill        = false
      local fill_amount      = 0
      local decimal_places   = 4
      local num_buffer       = StringBuilder()
      local temp             = StringBuilder()
      forEach(c in this)
        if (c == '$')
          if (control == '\\')
            output.print( c )
            control = '~'
          else
            control = c
            nextIteration
          endIf
        elseIf (c == '(')
          if (control == '$')
            control = c
            nextIteration
          else
            output.print( c )
            nextIteration
          endIf
        elseIf (c == '-')
          if (control == '(')
            align_right = false
            # control = c
            nextIteration
          endIf
        elseIf (is_numeric( c ))
          if (c == '0' and (control == '(' or control == '-'))

            if(num_buffer.count == 0) zero_fill = true
            # control = c
            nextIteration
          else
            num_buffer.write(c)
            nextIteration
          endIf
        elseIf (c == '.')
          if (num_buffer.count?)
            fill_amount = num_buffer->Integer
            num_buffer.clear
          endIf
          control = c
          nextIteration
        else
          # println( control )
          if (control == '(' or control == '.')
            if (control == '.')
              if(num_buffer.count?)
                decimal_places = num_buffer->Integer
                num_buffer.clear
              endIf
            else
              if(num_buffer.count?)
                fill_amount = num_buffer->Integer
                num_buffer.clear
              endIf
            endIf

            temp.print( stack, curr_stack_index, decimal_places )
            local fill_count = fill_amount - temp.count

            if(fill_count < 0)
              forEach (ch in temp) output.write( ch )
            else
              local fill_char = ' '
              if (zero_fill) fill_char = '0'
              if(align_right) output.pad_with( fill_char, fill_count )
              forEach (ch in temp) output.write( ch )
              if(not align_right) output.pad_with( fill_char, fill_count )
            endIf

            align_right = false
            temp.clear
            ++curr_stack_index

            if (c == ')')
              control = '~'
              nextIteration
            endIf
          elseIf (control == '$')
            temp.print( stack, curr_stack_index, decimal_places )
            output.write( temp )
            ++curr_stack_index
            temp.clear
            # output.print( c )
          endIf

          output.print( c )

          control = '~'
          num_buffer.clear
          fill_amount = 0
          zero_fill = false
        endIf
      endForEach

      stack.pop_frame
      # output.println( format + "hahahahah" )
      return output->String
      }#

    method is_numeric( ch:Character )->Logical
      return (ch >= '0' and ch <= '9')

    method to->Byte[]
      local non_ascii_count = 0
      forEach (ch in this)
        if (ch > 127) ++non_ascii_count
      endForEach

      local result = Byte[]( count + non_ascii_count*2 )

      # TODO: handle encoding of non-ascii characters into UTF-8
      forEach (ch in this) result.add( ch->Byte )

      return result

endClass

