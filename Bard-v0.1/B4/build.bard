class BuildBC : GoGo
  PROPERTIES
  METHODS
    method build( String cmd )
      which (cmd)
        case "clean"
          execute( "rm -f *.etc" )
          execute( "rm -f *.bc" )
          execute( "rm -f b4" )

        others
          execute( "bardic BC.bard" )
          execute( "bard BC" )
          generate_c_opcode_definitions
          #generate_js_opcode_definitions
      endWhich

    method generate_c_opcode_definitions
      local var h_filepath = "VM/BardOpcodes.h"
      local var c_filepath = "VM/BardOpcodes.c"
      if (not (File("Op.bard").newer_than(h_filepath) or File("build.bard").newer_than(h_filepath))) return

      println( "> Converting Op.bard to VM/BardOpcodes.h" )
      local var writer = File(h_filepath).create_writer

      writer.println( "#ifndef BARD_OPCODES_H" )
      writer.println( "#define BARD_OPCODES_H" )
      writer.println( "//=============================================================================" )
      writer.println( "// BardOpcodes.h" )
      writer.println( "//" )
      writer.println( "// This file is automatically generated - do not hand-modify as your changes" )
      writer.println( "// may be overwritten." )
      writer.println( "//=============================================================================" )
      writer.println

      local String[] opcode_names()
      local var next_opcode = 0
      forEach (line in LineReader(File("Op.bard")))
        line .= trim.to_uppercase
        if (line.count == 0) nextIteration
        if (line.begins_with("#")) nextIteration
        if (line.begins_with("SINGLETON") or line.begins_with("ENUMERATE") or line.begins_with("ENDCLASS")) nextIteration

        local var name = "BARD_OP_" + line
        opcode_names.add( name )
        writer.println( "#define $ $(3)" (name.left_justified(60),next_opcode) )
        ++next_opcode

      endForEach
      writer.println
      writer.println( "extern const char* bard_op_names[];" )

      writer.println
      writer.println( "#endif // BARD_OPCODES_H" )
      writer.close

      # BardOpcodes.c
      writer = File(c_filepath).create_writer

      writer.println( "//=============================================================================" )
      writer.println( "// BardOpcodes.c" )
      writer.println( "//" )
      writer.println( "// This file is automatically generated - do not hand-modify as your changes" )
      writer.println( "// may be overwritten." )
      writer.println( "//=============================================================================" )
      writer.println

      writer.println( "const char* bard_op_names[] = {" )
      local var first = true
      forEach (name in opcode_names)
        if (first) first = false
        else       writer.println( "," )
        writer.print( //  "$"// (name) )
      endForEach
      writer.println
      writer.println( "};" )

      writer.close

    method generate_js_opcode_definitions
      local var js_filepath = "JSVM/BardOp.js"
      if (not (File("Op.bard").newer_than(js_filepath) or File("build.bard").newer_than(js_filepath))) return

      println( "> Converting Op.bard to " + js_filepath )
      local var writer = File(js_filepath).create_writer

      writer.println( "//=============================================================================" )
      writer.println( "// BardOp.js" )
      writer.println( "//" )
      writer.println( "// This file is automatically generated - do not hand-modify as your changes" )
      writer.println( "// may be overwritten." )
      writer.println( "//=============================================================================" )
      writer.println
      writer.println( "var BardOp = BardOp ||" );
      writer.println( "{" );

      local var next_opcode = 0
      local var first = true
      forEach (line in LineReader(File("Op.bard")))
        line .= trim
        if (line.count == 0) nextIteration
        if (line.begins_with("#")) nextIteration
        if (line.begins_with("singleton") or line.begins_with("ENUMERATE") or line.begins_with("endClass")) nextIteration

        if (first) first = false
        else       writer.println(",")
        writer.print( "  $ : $(3)" (line.left_justified(60),next_opcode) )
        ++next_opcode

      endForEach
      writer.println
      writer.println( "};" );
      writer.close

endClass
