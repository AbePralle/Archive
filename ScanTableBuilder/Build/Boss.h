//-----------------------------------------------------------------------------
//  Generated by the Rogue compiler
//-----------------------------------------------------------------------------
#pragma once
#define ROGUE_GC_MODE_MANUAL 0
#define ROGUE_GC_MODE_AUTO_ST 1
#define ROGUE_GC_MODE_AUTO_MT 0
#define ROGUE_GC_MODE_AUTO_ANY 1
#define ROGUE_GC_MODE_BOEHM 0
#define ROGUE_GC_MODE_BOEHM_TYPED 0

#ifndef ROGUE_GC_THRESHOLD_DEFAULT
  #define ROGUE_GC_THRESHOLD_DEFAULT 1048576
#endif

#define ROGUE_THREAD_MODE_NONE 0
#define ROGUE_THREAD_MODE_PTHREADS 1
#define ROGUE_THREAD_MODE_CPP 2
#ifndef ROGUE_THREAD_MODE
  #define ROGUE_THREAD_MODE ROGUE_THREAD_MODE_NONE
#endif
// NATIVE HEADERS
//=============================================================================
//  NativeCPP.h
//
//  Rogue runtime routines.
//=============================================================================

#if defined(ROGUE_DEBUG_BUILD)
  #define ROGUE_DEBUG_STATEMENT(_s_) _s_
  #include <assert>
#else
  #define ROGUE_DEBUG_STATEMENT(_s_)
#endif

#if defined(ROGUE_GCDEBUG_BUILD)
  #define ROGUE_GCDEBUG_STATEMENT(_s_) _s_
#else
  #define ROGUE_GCDEBUG_STATEMENT(_s_) ;
#endif

#if defined(_WIN32)
#  define ROGUE_PLATFORM_WINDOWS 1
#elif defined(__APPLE__)
  #if TARGET_IPHONE_SIMULATOR || TARGET_OS_IPHONE
    #define ROGUE_PLATFORM_IOS 1
  #else
    #define ROGUE_PLATFORM_MACOS 1
    #define ROGUE_PLATFORM_UNIX_COMPATIBLE 1
  #endif
#elif defined(__ANDROID__)
#  define ROGUE_PLATFORM_ANDROID 1
#elif defined(__linux__)
#  define ROGUE_PLATFORM_UNIX_COMPATIBLE 1
#elif defined(__CYGWIN__)
#  define ROGUE_PLATFORM_UNIX_COMPATIBLE 1
#else
#  define ROGUE_PLATFORM_GENERIC 1
#endif

#if defined(ROGUE_PLATFORM_WINDOWS)
#  define NOGDI
#  pragma warning(disable: 4297) /* unexpected throw warnings */
#  include <windows.h>
#  include <signal.h>
#else
#  include <cstdint>
#endif

#include <stdlib.h>
#include <string.h>

#ifndef ROGUE_EXPORT_C
#  define ROGUE_EXPORT_C extern "C"
#endif
#ifndef ROGUE_EXPORT
#  define ROGUE_EXPORT extern
#endif

#define ROGUE_COND(X) (X)

//-----------------------------------------------------------------------------
//  Logging
//-----------------------------------------------------------------------------
#ifdef __ANDROID__
  #include <android/log.h>
  #define ROGUE_LOG(...)       __android_log_print( ANDROID_LOG_INFO,  "Rogue", __VA_ARGS__ )
  #define ROGUE_LOG_ERROR(...) __android_log_print( ANDROID_LOG_ERROR, "Rogue", __VA_ARGS__ )
#else
  #define ROGUE_LOG(...)       printf( __VA_ARGS__ )
  #define ROGUE_LOG_ERROR(...) printf( __VA_ARGS__ )
#endif

//-----------------------------------------------------------------------------
//  Multithreading
//-----------------------------------------------------------------------------
// When exiting Rogue code for a nontrivial amount of time (e.g., making a
// blocking call or returning from a native event handler), put a
// ROGUE_EXIT in your code.  When re-entering (e.g., after the blocking call
// or on entering a native event handler which is going to call Rogue code),
// do ROGUE_ENTER.
// ROGUE_BLOCKING_ENTER/EXIT do the same things but with the meanings reversed
// in case this makes it easier to think about.  An even easier way to make
// a blocking call is to simply wrap it in ROGUE_BLOCKING_CALL(foo(...)).

#if ROGUE_GC_MODE_AUTO_MT

#define ROGUE_ENTER Rogue_mtgc_enter()
#define ROGUE_EXIT  Rogue_mtgc_exit()

inline void Rogue_mtgc_enter (void);
inline void Rogue_mtgc_exit (void);

template<typename RT> RT Rogue_mtgc_reenter (RT expr);

#define ROGUE_BLOCKING_CALL(__x) (ROGUE_EXIT, Rogue_mtgc_reenter((__x)))
#define ROGUE_BLOCKING_VOID_CALL(__x) do {ROGUE_EXIT; __x; ROGUE_ENTER;}while(false)

#else

#define ROGUE_ENTER
#define ROGUE_EXIT

#define ROGUE_BLOCKING_CALL(__x) __x
#define ROGUE_BLOCKING_VOID_CALL(__x)

#endif

#define ROGUE_BLOCKING_ENTER ROGUE_EXIT
#define ROGUE_BLOCKING_EXIT  ROGUE_ENTER

//-----------------------------------------------------------------------------
//  Garbage Collection
//-----------------------------------------------------------------------------
#define ROGUE_DEF_LOCAL_REF(_t_,_n_, _v_) _t_ _n_ = _v_
#define ROGUE_DEF_LOCAL_REF_NULL(_t_,_n_) _t_ _n_ = 0
#define ROGUE_RETAIN_CATCH_VAR(_t_,_n_,_v_)
#define ROGUE_CREATE_REF(_t_,_n_) ((_t_)_n_)
#define ROGUE_ARG(_a_) _a_
#define ROGUE_DEF_COMPOUND_REF_PROP(_t_,_n_) RoguePtr<_t_> _n_

#define ROGUE_XINCREF(_o_)  (++((_o_)->reference_count))
#define ROGUE_XDECREF(_o_)  (--((_o_)->reference_count))
#define ROGUE_INCREF(_o_) if (_o_) (++((_o_)->reference_count))
#define ROGUE_DECREF(_o_) if (_o_) (--((_o_)->reference_count))

#define ROGUE_NEW_BYTES(_count_) malloc(_count_)
#define ROGUE_DEL_BYTES(_ptr_) free(_ptr_)

#define ROGUE_STL_ALLOCATOR std::allocator

extern void Rogue_configure_gc();

#ifdef ROGUE_GC_UNSAFE_COMPOUNDS
  #undef ROGUE_DEF_COMPOUND_REF_PROP
  #define ROGUE_DEF_COMPOUND_REF_PROP(_t_,_n_) _t_ _n_
#endif

#if ROGUE_GC_MODE_BOEHM_TYPED
  #undef ROGUE_GC_MODE_BOEHM
  #define ROGUE_GC_MODE_BOEHM 1
  #include "gc_typed.h"
  void Rogue_init_boehm_type_info();
  #define ROGUE_GC_ALLOC_TYPE_UNTYPED 0
  #define ROGUE_GC_ALLOC_TYPE_ATOMIC 1
  #define ROGUE_GC_ALLOC_TYPE_TYPED 2
#endif

#if ROGUE_GC_MODE_BOEHM
  #define GC_NAME_CONFLICT
  #if ROGUE_THREAD_MODE
    // Assume GC built for the right thread mode!
    #define GC_THREADS 1
  #endif
  #include "gc.h"
  #include "gc_cpp.h"
  #include "gc_allocator.h"

  #undef ROGUE_STL_ALLOCATOR
  #define ROGUE_STL_ALLOCATOR traceable_allocator

  struct RogueObject;
  extern void Rogue_Boehm_IncRef (RogueObject*);
  extern void Rogue_Boehm_DecRef (RogueObject*);

  #undef ROGUE_NEW_BYTES
  #undef ROGUE_DEL_BYTES
  #define ROGUE_NEW_BYTES(_count_) ((void*)GC_MALLOC(_count_))
  //#define ROGUE_DEL_BYTES(_ptr_) GC_FREE(_ptr_)
  #define ROGUE_DEL_BYTES(_ptr_) /* May perform better! */

  #undef ROGUE_INCREF
  #undef ROGUE_DECREF
  #undef ROGUE_XINCREF
  #undef ROGUE_XDECREF
  #define ROGUE_INCREF(_o_) if (_o_) Rogue_Boehm_IncRef(_o_)
  #define ROGUE_DECREF(_o_) if (_o_) Rogue_Boehm_DecRef(_o_)
  #define ROGUE_XINCREF(_o_) Rogue_Boehm_IncRef(_o_)
  #define ROGUE_XDECREF(_o_) Rogue_Boehm_DecRef(_o_)
#endif

#if ROGUE_GC_MODE_AUTO_ANY
  #undef ROGUE_DEF_LOCAL_REF_NULL
  #define ROGUE_DEF_LOCAL_REF_NULL(_t_,_n_) RoguePtr<_t_> _n_;
  #undef ROGUE_DEF_LOCAL_REF
  #define ROGUE_DEF_LOCAL_REF(_t_,_n_, _v_) RoguePtr<_t_> _n_(_v_);
  #undef ROGUE_RETAIN_CATCH_VAR
  #define ROGUE_RETAIN_CATCH_VAR(_t_,_n_,_v_) RoguePtr<_t_> _n_(_v_);
  #undef ROGUE_ARG
  #define ROGUE_ARG(_a_) rogue_ptr(_a_)
#endif

#define ROGUE_ATTRIBUTE_IS_CLASS            0
#define ROGUE_ATTRIBUTE_IS_ASPECT           1
#define ROGUE_ATTRIBUTE_IS_PRIMITIVE        2
#define ROGUE_ATTRIBUTE_IS_COMPOUND         3
#define ROGUE_ATTRIBUTE_TYPE_MASK           7

// AKA by-value type; not a reference type
#define ROGUE_ATTRIBUTE_IS_DIRECT           2

#define ROGUE_ATTRIBUTE_IS_API               (1 << 4)
#define ROGUE_ATTRIBUTE_IS_NATIVE            (1 << 5)
#define ROGUE_ATTRIBUTE_IS_MACRO             (1 << 6)
#define ROGUE_ATTRIBUTE_IS_INITIALIZER       (1 << 7)
#define ROGUE_ATTRIBUTE_IS_IMMUTABLE         (1 << 8)
#define ROGUE_ATTRIBUTE_IS_GLOBAL            (1 << 9)
#define ROGUE_ATTRIBUTE_IS_SINGLETON         (1 << 10)
#define ROGUE_ATTRIBUTE_IS_INCORPORATED      (1 << 11)
#define ROGUE_ATTRIBUTE_IS_GENERATED         (1 << 12)
#define ROGUE_ATTRIBUTE_IS_ESSENTIAL         (1 << 13)
#define ROGUE_ATTRIBUTE_IS_TASK              (1 << 14)
#define ROGUE_ATTRIBUTE_IS_TASK_CONVERSION   (1 << 15)
#define ROGUE_ATTRIBUTE_IS_AUGMENT           (1 << 16)
#define ROGUE_ATTRIBUTE_IS_ABSTRACT          (1 << 17)
#define ROGUE_ATTRIBUTE_IS_MUTATING          (1 << 18)
#define ROGUE_ATTRIBUTE_IS_FALLBACK          (1 << 19)
#define ROGUE_ATTRIBUTE_IS_SPECIAL           (1 << 20)
#define ROGUE_ATTRIBUTE_IS_PROPAGATED        (1 << 21)
#define ROGUE_ATTRIBUTE_IS_DYNAMIC           (1 << 22)
#define ROGUE_ATTRIBUTE_RETURNS_THIS         (1 << 23)
#define ROGUE_ATTRIBUTE_IS_PREFERRED         (1 << 24)
#define ROGUE_ATTRIBUTE_IS_NONapi            (1 << 25)
#define ROGUE_ATTRIBUTE_IS_DEPRECATED        (1 << 26)
#define ROGUE_ATTRIBUTE_IS_ENUM              (1 << 27)
#define ROGUE_ATTRIBUTE_IS_THREAD_LOCAL      (1 << 28)
#define ROGUE_ATTRIBUTE_IS_SYNCHRONIZED      (1 << 29)
#define ROGUE_ATTRIBUTE_IS_SYNCHRONIZABLE    (1 << 30)

template <class T>
struct RoguePtr
{
  T o;
  RoguePtr ( ) : o(0) { }

  RoguePtr (  T oo )
   : o(oo)
  {
    ROGUE_GCDEBUG_STATEMENT(ROGUE_LOG("ref "));
    ROGUE_GCDEBUG_STATEMENT(show());
    ROGUE_INCREF(o);
  }

  RoguePtr (const RoguePtr<T> & oo)
   : o(oo.o)
  {
    ROGUE_GCDEBUG_STATEMENT(ROGUE_LOG("ref "));
    ROGUE_GCDEBUG_STATEMENT(show());
    ROGUE_INCREF(o);
  }

  template <class O>
  operator O ()
  {
    return (O)o;
  }

  operator T ()
  {
    return o;
  }

  RoguePtr & operator= ( T oo )
  {
    release();
    o = oo;
    ROGUE_INCREF(o);
    ROGUE_GCDEBUG_STATEMENT(ROGUE_LOG("assign "));
    ROGUE_GCDEBUG_STATEMENT(show());
    return *this;
  }

  bool operator==( RoguePtr<T> other ) const
  {
    return (o == other.o);
  }

  bool operator!=( RoguePtr<T> other ) const
  {
    return (o != other.o);
  }

  T& operator->()
  {
    return o;
  }

  void release ()
  {
    if (!o) return;
    ROGUE_DECREF(o);
    ROGUE_GCDEBUG_STATEMENT( if (o->reference_count == 0) show() );
    if (o->reference_count < 0) o->reference_count = 0;
    o = 0;
  }

  ~RoguePtr ()
  {
    release();
  }

  void show () {
    ROGUE_LOG("ptr:%p o:%p rc:%i\n", this, o, o ? o->reference_count : -42);
  }
};


template < class T, class U >
bool operator!=( const RoguePtr<T>& lhs, const RoguePtr<U>& rhs )
{
  return lhs.o != rhs.o;
}


template <class T>
RoguePtr<T> & rogue_ptr ( RoguePtr<T> & o )
{
  return o;
}

template <class T>
RoguePtr<T*> rogue_ptr ( T * p )
{
  return RoguePtr<T*>(p);
}

template <class T>
T rogue_ptr (T p)
{
  return p;
}


//-----------------------------------------------------------------------------
//  Threading
//-----------------------------------------------------------------------------

#if ROGUE_THREAD_MODE != ROGUE_THREAD_MODE_NONE

#if ROGUE_GC_MODE_BOEHM
  #define ROGUE_THREAD_LOCALS_INIT(__first, __last) GC_add_roots((void*)&(__first), (void*)((&(__last))+1));
  #define ROGUE_THREAD_LOCALS_DEINIT(__first, __last) GC_remove_roots((void*)&(__first), (void*)((&(__last))+1));
#else
  #define ROGUE_THREAD_LOCALS_INIT(__first, __last)
  #define ROGUE_THREAD_LOCALS_DEINIT(__first, __last)
#endif

#endif

#if ROGUE_THREAD_MODE == ROGUE_THREAD_MODE_PTHREADS

#include <pthread.h>
#include <atomic>

#define ROGUE_THREAD_LOCAL thread_local

static inline void _rogue_init_mutex (pthread_mutex_t * mutex)
{
  pthread_mutexattr_t attr;
  pthread_mutexattr_init(&attr);
  pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
  pthread_mutex_init(mutex, &attr);
}

class RogueUnlocker
{
  pthread_mutex_t & mutex;
public:
  RogueUnlocker(pthread_mutex_t & mutex)
  : mutex(mutex)
  {
    pthread_mutex_lock(&mutex);
  }
  ~RogueUnlocker (void)
  {
    pthread_mutex_unlock(&mutex);
  }
};

#define ROGUE_SYNC_OBJECT_TYPE pthread_mutex_t
#define ROGUE_SYNC_OBJECT_INIT _rogue_init_mutex(&THIS->_object_mutex);
#define ROGUE_SYNC_OBJECT_CLEANUP pthread_mutex_destroy(&THIS->_object_mutex);
#define ROGUE_SYNC_OBJECT_ENTER RogueUnlocker _unlocker(THIS->_object_mutex);
#define ROGUE_SYNC_OBJECT_EXIT

#elif ROGUE_THREAD_MODE == ROGUE_THREAD_MODE_CPP

#include <thread>
#include <mutex>
#include <atomic>

#define ROGUE_THREAD_LOCAL thread_local

class RogueUnlocker
{
  std::recursive_mutex & mutex;
public:
  RogueUnlocker(std::recursive_mutex & mutex)
  : mutex(mutex)
  {
    mutex.lock();
  }
  ~RogueUnlocker (void)
  {
    mutex.unlock();
  }
};

#define ROGUE_SYNC_OBJECT_TYPE std::recursive_mutex
#define ROGUE_SYNC_OBJECT_INIT
#define ROGUE_SYNC_OBJECT_CLEANUP
#define ROGUE_SYNC_OBJECT_ENTER RogueUnlocker _unlocker(THIS->_object_mutex);
#define ROGUE_SYNC_OBJECT_EXIT

#else

#define ROGUE_SYNC_OBJECT_TYPE
#define ROGUE_SYNC_OBJECT_INIT
#define ROGUE_SYNC_OBJECT_CLEANUP
#define ROGUE_SYNC_OBJECT_ENTER
#define ROGUE_SYNC_OBJECT_EXIT
#define ROGUE_THREAD_LOCAL
#define ROGUE_THREAD_LOCALS_INIT(__first, __last)
#define ROGUE_THREAD_LOCALS_DEINIT(__first, __last)

#endif


//-----------------------------------------------------------------------------
//  Basics (Primitive types, macros, etc.)
//-----------------------------------------------------------------------------
#include <limits>
#define ROGUE_R32_INFINITY       std::numeric_limits<RogueReal32>::infinity()
#define ROGUE_R32_NEG_INFINITY (-std::numeric_limits<RogueReal32>::infinity())
#define ROGUE_R32_NAN            std::numeric_limits<RogueReal32>::quiet_NaN()

#define ROGUE_R64_INFINITY       std::numeric_limits<RogueReal64>::infinity()
#define ROGUE_R64_NEG_INFINITY (-std::numeric_limits<RogueReal64>::infinity())
#define ROGUE_R64_NAN            std::numeric_limits<RogueReal64>::quiet_NaN()

#if defined(ROGUE_PLATFORM_WINDOWS)
  typedef double           RogueReal64;
  typedef float            RogueReal32;
  typedef __int64          RogueInt64;
  typedef __int32          RogueInt32;
  typedef __int32          RogueCharacter;
  typedef unsigned __int16 RogueWord;
  typedef unsigned char    RogueByte;
  typedef bool             RogueLogical;
  typedef unsigned __int64 RogueUInt64;
  typedef unsigned __int32 RogueUInt32;
#else
  typedef double           RogueReal64;
  typedef float            RogueReal32;
  typedef int64_t          RogueInt64;
  typedef int32_t          RogueInt32;
  typedef int32_t          RogueCharacter;
  typedef uint16_t         RogueWord;
  typedef uint8_t          RogueByte;
  typedef bool             RogueLogical;
  typedef uint64_t         RogueUInt64;
  typedef uint32_t         RogueUInt32;
#endif

struct RogueAllocator;
struct RogueArray;
struct RogueCharacterList;
struct RogueString;

#define ROGUE_CREATE_OBJECT(name) RogueType_create_object(RogueType##name,0)
  //e.g. RogueType_create_object(RogueStringBuilder,0)

#define ROGUE_SINGLETON(name) RogueType_singleton(RogueType##name)
  //e.g. RogueType_singleton( RogueTypeConsole )

#define ROGUE_PROPERTY(name) p_##name


//-----------------------------------------------------------------------------
//  Forward References
//-----------------------------------------------------------------------------
struct RogueObject;


//-----------------------------------------------------------------------------
//  Callback Definitions
//-----------------------------------------------------------------------------
typedef void         (*RogueCallback)();
typedef void         (*RogueTraceFn)( void* obj );
typedef RogueObject* (*RogueInitFn)( void* obj );
typedef void         (*RogueCleanUpFn)( void* obj );
typedef RogueString* (*RogueToStringFn)( void* obj );


//-----------------------------------------------------------------------------
//  RogueCallbackInfo
//-----------------------------------------------------------------------------
struct RogueCallbackInfo
{
  RogueCallback      callback;
  RogueCallbackInfo* next_callback_info;

  RogueCallbackInfo() : callback(0), next_callback_info(0) {}
  RogueCallbackInfo( RogueCallback callback ) : callback(callback), next_callback_info(0) {}

  ~RogueCallbackInfo() { if (next_callback_info) delete next_callback_info; }

  void add( RogueCallback callback )
  {
    if (this->callback)
    {
      if (next_callback_info) next_callback_info->add( callback );
      else                    next_callback_info = new RogueCallbackInfo( callback );
    }
    else
    {
      this->callback = callback;
    }
  }

  void call()
  {
    if (callback) callback();
    if (next_callback_info) next_callback_info->call();
  }
};


//-----------------------------------------------------------------------------
//  RogueType
//-----------------------------------------------------------------------------
struct RogueType
{
  RogueObject* type_info;

  int          name_index;

  int          base_type_count;
  RogueType**  base_types;

  int          index;  // used for aspect call dispatch
  int          object_size;
  int          attributes;

  int          global_property_count;
  const int*   global_property_name_indices;
  const int*   global_property_type_indices;
  const void** global_property_pointers;

  int          property_count;
  const int*   property_name_indices;
  const int*   property_type_indices;
  const int*   property_offsets;

#if (ROGUE_THREAD_MODE == ROGUE_THREAD_MODE_PTHREADS) || (ROGUE_THREAD_MODE == ROGUE_THREAD_MODE_CPP)
  std::atomic<RogueObject*> _singleton;
#else
  RogueObject* _singleton;
#endif
  const void** methods; // first function pointer in Rogue_dynamic_method_table
  int          method_count;

  int          global_method_count;

  RogueAllocator*   allocator;

  RogueTraceFn      trace_fn;
  RogueInitFn       init_object_fn;
  RogueInitFn       init_fn;
  RogueCleanUpFn    on_cleanup_fn;
  RogueToStringFn   to_string_fn;

#if ROGUE_GC_MODE_BOEHM_TYPED
  int          gc_alloc_type;
  GC_descr     gc_type_descr;
#endif
};

ROGUE_EXPORT_C RogueArray*  RogueType_create_array( int count, int element_size, bool is_reference_array=false, int element_type_index=-1 ) ;
ROGUE_EXPORT_C RogueObject* RogueType_create_object( RogueType* THIS, RogueInt32 size );
ROGUE_EXPORT_C RogueLogical RogueType_instance_of( RogueType* THIS, RogueType* ancestor_type );
ROGUE_EXPORT_C RogueString* RogueType_name( RogueType* THIS );
ROGUE_EXPORT_C bool         RogueType_name_equals( RogueType* THIS, const char* name );
ROGUE_EXPORT_C void         RogueType_print_name( RogueType* THIS );
ROGUE_EXPORT_C RogueType*   RogueType_retire( RogueType* THIS );
ROGUE_EXPORT_C RogueObject* RogueType_singleton( RogueType* THIS );


//-----------------------------------------------------------------------------
//  RogueObject
//-----------------------------------------------------------------------------
struct RogueObjectType : RogueType
{
};

struct RogueObject
{
#if defined(ROGUE_CUSTOM_OBJECT_PROPERTY)
ROGUE_CUSTOM_OBJECT_PROPERTY
#endif

  RogueObject* next_object;
  // Used to keep track of this allocation so that it can be freed when no
  // longer referenced.

  RogueType*   type;
  // Type info for this object.

  RogueInt32 object_size;
  // Set to be ~object_size when traced through during a garbage collection,
  // then flipped back again at the end of GC.

  RogueInt32 reference_count;
  // A positive reference_count ensures that this object will never be
  // collected.  A zero reference_count means this object is kept only as
  // long as it is visible to the memory manager.
};

ROGUE_EXPORT_C RogueObject* RogueObject_as( RogueObject* THIS, RogueType* specialized_type );
ROGUE_EXPORT_C RogueLogical RogueObject_instance_of( RogueObject* THIS, RogueType* ancestor_type );
ROGUE_EXPORT_C void*        RogueObject_retain( RogueObject* THIS );
ROGUE_EXPORT_C void*        RogueObject_release( RogueObject* THIS );
ROGUE_EXPORT_C RogueString* RogueObject_to_string( RogueObject* THIS );

ROGUE_EXPORT_C void RogueObject_trace( void* obj );
ROGUE_EXPORT_C void RogueString_trace( void* obj );
ROGUE_EXPORT_C void RogueArray_trace( void* obj );


//-----------------------------------------------------------------------------
//  RogueString
//-----------------------------------------------------------------------------
struct RogueString : RogueObject
{
  RogueInt32 byte_count;       // in UTF-8 bytes
  RogueInt32 character_count;  // in whole characters
  RogueInt32 is_ascii;
  RogueInt32 cursor_offset;
  RogueInt32 cursor_index;
  RogueInt32 hash_code;
#if ROGUE_GC_MODE_BOEHM_TYPED
  char       *utf8;
#else
  char       utf8[];
#endif
};

ROGUE_EXPORT_C RogueString* RogueString_create_with_byte_count( int byte_count );
ROGUE_EXPORT_C RogueString* RogueString_create_from_utf8( const char* utf8, int count=-1 );
ROGUE_EXPORT_C RogueString* RogueString_create_from_characters( RogueCharacterList* characters );
void         RogueString_print_string( RogueString* st );
void         RogueString_print_characters( RogueCharacter* characters, int count );
void         RogueString_print_utf8( char* utf8, int count );

RogueCharacter RogueString_character_at( RogueString* THIS, int index );
RogueInt32     RogueString_set_cursor( RogueString* THIS, int index );
RogueString*   RogueString_validate( RogueString* THIS );


//-----------------------------------------------------------------------------
//  RogueArray
//-----------------------------------------------------------------------------
#if defined(__clang__)
#define ROGUE_EMPTY_ARRAY
#elif defined(__GNUC__) || defined(__GNUG__)
#define ROGUE_EMPTY_ARRAY 0
#elif defined(ROGUE_PLATFORM_WINDOWS)
#define ROGUE_EMPTY_ARRAY /* Okay for MSVC++ */
#endif
struct RogueArray : RogueObject
{
  int  count;
  int  element_size;
  bool is_reference_array;

#if ROGUE_GC_MODE_BOEHM_TYPED
  union
  {
    RogueObject**   as_objects;
    RogueByte*      as_logicals;
    RogueByte*      as_bytes;
    RogueCharacter* as_characters;
    RogueInt32*     as_int32s;
    RogueInt64*     as_int64s;
    RogueReal32*    as_real32s;
    RogueReal64*    as_real64s;
  };
#else
  union
  {
    RogueObject*   as_objects[ROGUE_EMPTY_ARRAY];
    RogueByte      as_logicals[ROGUE_EMPTY_ARRAY];
    RogueByte      as_bytes[ROGUE_EMPTY_ARRAY];
    RogueCharacter as_characters[ROGUE_EMPTY_ARRAY];
    RogueInt32     as_int32s[ROGUE_EMPTY_ARRAY];
    RogueInt64     as_int64s[ROGUE_EMPTY_ARRAY];
    RogueReal32    as_real32s[ROGUE_EMPTY_ARRAY];
    RogueReal64    as_real64s[ROGUE_EMPTY_ARRAY];
  };
#endif
};

RogueArray* RogueArray_set( RogueArray* THIS, RogueInt32 i1, RogueArray* other, RogueInt32 other_i1, RogueInt32 copy_count );


//-----------------------------------------------------------------------------
//  RogueAllocator
//-----------------------------------------------------------------------------
#ifndef ROGUEMM_PAGE_SIZE
// 4k; should be a multiple of 256 if redefined
#  define ROGUEMM_PAGE_SIZE (4*1024)
#endif

// 0 = large allocations, 1..4 = block sizes 64, 128, 192, 256
#ifndef ROGUEMM_SLOT_COUNT
#  define ROGUEMM_SLOT_COUNT 5
#endif

// 2^6 = 64
#ifndef ROGUEMM_GRANULARITY_BITS
#  define ROGUEMM_GRANULARITY_BITS 6
#endif

// Block sizes increase by 64 bytes per slot
#ifndef ROGUEMM_GRANULARITY_SIZE
#  define ROGUEMM_GRANULARITY_SIZE (1 << ROGUEMM_GRANULARITY_BITS)
#endif

// 63
#ifndef ROGUEMM_GRANULARITY_MASK
#  define ROGUEMM_GRANULARITY_MASK (ROGUEMM_GRANULARITY_SIZE - 1)
#endif

// Small allocation limit is 256 bytes - afterwards objects are allocated
// from the system.
// Set to -1 to disable the small object allocator.
#ifndef ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT
#  define ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT  ((ROGUEMM_SLOT_COUNT-1) << ROGUEMM_GRANULARITY_BITS)
#endif


//-----------------------------------------------------------------------------
//  RogueAllocationPage
//-----------------------------------------------------------------------------
struct RogueAllocationPage
{
  // Backs small 0..256-byte allocations.
  RogueByte  data[ ROGUEMM_PAGE_SIZE ];

  RogueAllocationPage* next_page;

  RogueByte* cursor;
  int        remaining;
};

RogueAllocationPage* RogueAllocationPage_create( RogueAllocationPage* next_page );
RogueAllocationPage* RogueAllocationPage_delete( RogueAllocationPage* THIS );
void*                RogueAllocationPage_allocate( RogueAllocationPage* THIS, int size );


//-----------------------------------------------------------------------------
//  RogueAllocator
//-----------------------------------------------------------------------------
struct RogueAllocator
{
  RogueAllocationPage* pages;
  RogueObject*         objects;
  RogueObject*         objects_requiring_cleanup;
  RogueObject*         available_objects[ROGUEMM_SLOT_COUNT];
};

RogueAllocator* RogueAllocator_create();
RogueAllocator* RogueAllocator_delete( RogueAllocator* THIS );

void*        RogueAllocator_allocate( int size );
RogueObject* RogueAllocator_allocate_object( RogueAllocator* THIS, RogueType* of_type, int size, int element_type_index=-1 );
void*        RogueAllocator_free( RogueAllocator* THIS, void* data, int size );
void         RogueAllocator_free_objects( RogueAllocator* THIS );
void         RogueAllocator_free_all();
void         RogueAllocator_collect_garbage( RogueAllocator* THIS );

extern int                Rogue_allocator_count;
extern RogueAllocator     Rogue_allocators[];
extern int                Rogue_type_count;
extern RogueType          Rogue_types[];
extern const int          Rogue_type_info_table[];
extern const int          Rogue_type_name_index_table[];
extern const int          Rogue_object_size_table[];
extern const void*        Rogue_global_property_pointers[];
extern const int          Rogue_property_offsets[];
extern const int          Rogue_attributes_table[];
extern const void*        Rogue_dynamic_method_table[];
//extern int                Rogue_property_info_table[][];
extern RogueInitFn        Rogue_init_object_fn_table[];
extern RogueInitFn        Rogue_init_fn_table[];
extern RogueTraceFn       Rogue_trace_fn_table[];
extern RogueCleanUpFn     Rogue_on_cleanup_fn_table[];
extern RogueToStringFn    Rogue_to_string_fn_table[];
extern int                Rogue_literal_string_count;
extern RogueString*       Rogue_literal_strings[];
extern RogueLogical       Rogue_configured;
extern int                Rogue_argc;
extern const char**       Rogue_argv;
extern bool               Rogue_gc_logging;
extern int                Rogue_gc_threshold;
extern bool               Rogue_gc_requested;
extern RogueCallbackInfo  Rogue_on_gc_begin;
extern RogueCallbackInfo  Rogue_on_gc_trace_finished;
extern RogueCallbackInfo  Rogue_on_gc_end;

struct RogueWeakReference;
extern RogueWeakReference* Rogue_weak_references;

ROGUE_EXPORT_C void Rogue_configure( int argc=0, const char* argv[]=0 );
ROGUE_EXPORT_C bool Rogue_collect_garbage( bool forced=false );
ROGUE_EXPORT_C void Rogue_launch();
ROGUE_EXPORT_C void Rogue_init_thread();
ROGUE_EXPORT_C void Rogue_deinit_thread();
ROGUE_EXPORT_C void Rogue_quit();
ROGUE_EXPORT_C bool Rogue_update_tasks();  // returns true if tasks are still active


//-----------------------------------------------------------------------------
//  RogueDebugTrace
//-----------------------------------------------------------------------------
struct RogueDebugTrace
{
  static char buffer[512];

  const char* method_signature;
  const char* filename;
  int line;
  RogueDebugTrace* previous_trace;

  RogueDebugTrace( const char* method_signature, const char* filename, int line );
  ~RogueDebugTrace();

  int   count();

  char* to_c_string();
};

void Rogue_print_stack_trace ( bool leading_newline=false);


//-----------------------------------------------------------------------------
//  Error Handling
//-----------------------------------------------------------------------------
#define ROGUE_TRY \
  try \
  {

#define ROGUE_END_TRY \
  }

#define ROGUE_THROW(_error_object) \
  throw _error_object

#define ROGUE_CATCH(_ErrorType,local_error_object) \
  } \
  catch (_ErrorType* local_error_object) \
  { \
    ROGUE_RETAIN_CATCH_VAR( _ErrorType*, _internal_exception_reference, local_error_object );

#define ROGUE_CATCH_NO_VAR(_ErrorType) \
  } \
  catch (_ErrorType* caught_error) \
  {

extern void Rogue_terminate_handler ();

template <class T>
void Rogue_ignore_unused(T&) {}

//=============================================================================
#include <atomic>
      #ifdef ROGUE_PLATFORM_WINDOWS
        #define ROGUE_CONSOLE_FULL 0
      #else
        #define ROGUE_CONSOLE_FULL 1
      #endif
      #if ROGUE_CONSOLE_FULL
        #include <termios.h>
        #include <unistd.h>
        #include <sys/ioctl.h>
      #endif
      #ifndef STDIN_FILENO     /* Probably Windows */
        #define STDIN_FILENO 0 /* Probably correct */
      #endif
      #if defined(ROGUE_PLATFORM_WINDOWS)
        #include <io.h>
        #define ROGUE_READ_CALL _read
      #else
        #define ROGUE_READ_CALL read
      #endif
      #if __APPLE__
        #include "TargetConditionals.h"
      #endif
#include <cmath>

// FORWARD DECLARATIONS
struct RogueClassGlobal; // Global
struct RogueClassPrintWriter_global_output_buffer_; // PrintWriter<<global_output_buffer>>
struct RogueClassPrintWriter; // PrintWriter
struct RogueStringBuilder; // StringBuilder
struct RogueByte_List; // Byte[]
struct RogueClassGenericList; // GenericList
struct RogueClassStringBuilderPool; // StringBuilderPool
struct RogueStringBuilder_List; // StringBuilder[]
struct Rogue_Function____List; // (Function())[]
struct RogueClass_Function___; // (Function())
struct RogueClassStackTrace; // StackTrace
struct RogueString_List; // String[]
struct RogueCharacter_List; // Character[]
struct RogueClassReader_Character_; // Reader<<Character>>
struct RogueClassConsole; // Console
struct RogueClassPrintWriter_output_buffer_; // PrintWriter<<output_buffer>>
struct RogueClassConsoleErrorPrinter; // ConsoleErrorPrinter
struct RogueClassMath; // Math
struct RogueClassFunction_540; // Function_540
struct RogueClassBossScanTableBuilder; // BossScanTableBuilder
struct RogueClassScanTableBuilder; // ScanTableBuilder
struct RogueClassScanState; // ScanState
struct RogueInt32_List; // Int32[]
struct RogueTransition_List; // Transition[]
struct RogueClassTransition; // Transition
struct RogueClassRuntime; // Runtime
struct RogueClassSystem; // System
struct RogueWeakReference; // WeakReference
struct RogueClassFunction_1670; // Function_1670
struct RogueException; // Exception
struct RogueClassError; // Error
struct RogueClassOutOfBoundsError; // OutOfBoundsError
struct RogueOptionalInt32; // Int32?
struct RogueClassStateFlags; // StateFlags
struct RogueClassTransitionActions; // TransitionActions
struct RogueClassSystemEnvironment; // SystemEnvironment
struct RogueClassTokenType; // TokenType

// COMPOUND DEFINITIONS
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Optional.rogue"
struct RogueOptionalInt32
{
  // PROPERTIES
  RogueInt32 value;
  RogueLogical exists;

  RogueOptionalInt32() { memset( this, 0, sizeof(RogueOptionalInt32) ); }

  RogueOptionalInt32( RogueInt32 value, bool exists=true ) : value(value), exists(exists) {}
};

#line 3 "../ScanTableBuilder.rogue"
struct RogueClassStateFlags
{
  // PROPERTIES
  RogueInt32 value;

  RogueClassStateFlags() { memset( this, 0, sizeof(RogueClassStateFlags) ); }

  RogueClassStateFlags( RogueInt32 value ) : value(value) {}

};

#line 10
struct RogueClassTransitionActions
{
  // PROPERTIES
  RogueInt32 value;

  RogueClassTransitionActions() { memset( this, 0, sizeof(RogueClassTransitionActions) ); }

  RogueClassTransitionActions( RogueInt32 value ) : value(value) {}

};

#line 109 "../../Rogue/Programs/RogueC/Libraries/Standard/System.rogue"
struct RogueClassSystemEnvironment
{
  // PROPERTIES

};

#line 3 "../Boss.rogue"
struct RogueClassTokenType
{
  // PROPERTIES
  RogueInt32 value;

  RogueClassTokenType() { memset( this, 0, sizeof(RogueClassTokenType) ); }

  RogueClassTokenType( RogueInt32 value ) : value(value) {}

};


// GLOBAL PROPERTIES
extern ROGUE_THREAD_LOCAL RogueByte_List* RogueStringBuilder_work_bytes;
extern ROGUE_THREAD_LOCAL RogueClassStringBuilderPool* RogueStringBuilder_pool;
extern RogueString_List* RogueSystem_command_line_arguments;
extern RogueString* RogueSystem_executable_filepath;
extern RogueClassSystemEnvironment RogueSystem_environment;
extern RogueString_List* RogueStateFlags_names;
extern RogueInt32_List* RogueStateFlags_values;
extern RogueString_List* RogueTransitionActions_names;
extern RogueInt32_List* RogueTransitionActions_values;
extern RogueString_List* RogueTokenType_names;
extern RogueInt32_List* RogueTokenType_values;

// CLASS DEFINITIONS
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Global.rogue"
struct RogueClassGlobal : RogueObject
{
  // PROPERTIES
  #line 3
  RogueClassPrintWriter* console;
  #line 4
  RogueStringBuilder* global_output_buffer;
  #line 5
  Rogue_Function____List* exit_functions;

};

#line 41 "../../Rogue/Programs/RogueC/Libraries/Standard/PrintWriter.rogue"
struct RogueClassPrintWriter_global_output_buffer_ : RogueObject
{
};

#line 1
struct RogueClassPrintWriter : RogueObject
{
};

#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/StringBuilder.rogue"
struct RogueStringBuilder : RogueObject
{
  // PROPERTIES
  #line 15
  RogueByte_List* utf8;
  #line 16
  RogueInt32 count;
  #line 17
  RogueInt32 indent;
  #line 18
  RogueInt32 cursor_offset;
  #line 19
  RogueInt32 cursor_index;
  #line 20
  RogueLogical at_newline;

};

#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
struct RogueByte_List : RogueObject
{
  // PROPERTIES
  #line 6
  RogueArray* data;
  #line 7
  RogueInt32 count;

};

#line 1
struct RogueClassGenericList : RogueObject
{
  // PROPERTIES

};



#line 461 "../../Rogue/Programs/RogueC/Libraries/Standard/StringBuilder.rogue"
struct RogueClassStringBuilderPool : RogueObject
{
  // PROPERTIES
  #line 463
  RogueStringBuilder_List* available;

};

#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
struct RogueStringBuilder_List : RogueObject
{
  // PROPERTIES
  #line 6
  RogueArray* data;
  #line 7
  RogueInt32 count;

};


#line 4
struct Rogue_Function____List : RogueObject
{
  // PROPERTIES
  #line 6
  RogueArray* data;
  #line 7
  RogueInt32 count;

};

#line 33 "../../Rogue/Programs/RogueC/Libraries/Standard/Task.rogue"
struct RogueClass_Function___ : RogueObject
{
  // PROPERTIES

};

#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/StackTrace.rogue"
struct RogueClassStackTrace : RogueObject
{
  // PROPERTIES
  #line 3
  RogueString_List* entries;
  #line 4
  RogueInt32 count;
  #line 5
  RogueLogical is_formatted;

};

#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
struct RogueString_List : RogueObject
{
  // PROPERTIES
  #line 6
  RogueArray* data;
  #line 7
  RogueInt32 count;

};




#line 4
struct RogueCharacter_List : RogueObject
{
  // PROPERTIES
  #line 6
  RogueArray* data;
  #line 7
  RogueInt32 count;

};

#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Reader.rogue"
struct RogueClassReader_Character_ : RogueObject
{
};

#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
struct RogueClassConsole : RogueObject
{
  // PROPERTIES
  #line 3 "../../Rogue/Programs/RogueC/Libraries/Standard/Reader.rogue"
  RogueInt32 position;
  #line 49 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
  RogueClassConsoleErrorPrinter* error;
  #line 51
  RogueLogical immediate_mode;
  #line 54
  RogueLogical is_blocking;
  #line 56
  RogueLogical decode_bytes;
  #line 58
  RogueStringBuilder* output_buffer;
  #line 59
  RogueStringBuilder* input_buffer;
  #line 61
  RogueOptionalInt32 next_input_character;
  #line 62
  RogueByte_List* input_bytes;
  #line 64
#if (ROGUE_CONSOLE_FULL)
    termios original_terminal_settings;
    int     original_stdin_flags;
#endif

};

#line 41 "../../Rogue/Programs/RogueC/Libraries/Standard/PrintWriter.rogue"
struct RogueClassPrintWriter_output_buffer_ : RogueObject
{
};

#line 300 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
struct RogueClassConsoleErrorPrinter : RogueObject
{
  // PROPERTIES
  #line 302
  RogueStringBuilder* output_buffer;

};

#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Math.rogue"
struct RogueClassMath : RogueObject
{
  // PROPERTIES

};

#line 9 "../../Rogue/Programs/RogueC/Libraries/Standard/Global.rogue"
struct RogueClassFunction_540 : RogueObject
{
  // PROPERTIES

};

#line 11 "../Boss.rogue"
struct RogueClassBossScanTableBuilder : RogueObject
{
  // PROPERTIES
  #line 103 "../ScanTableBuilder.rogue"
  RogueClassScanState* start;

};

#line 101
struct RogueClassScanTableBuilder : RogueObject
{
  // PROPERTIES
  #line 103
  RogueClassScanState* start;

};

#line 24
struct RogueClassScanState : RogueObject
{
  // PROPERTIES
  #line 32
  RogueInt32 _type;
  #line 33
  RogueInt32 option;
  #line 34
  RogueClassStateFlags flags;
  #line 35
  RogueInt32 index;
  #line 36
  RogueTransition_List* transitions;

};

#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
struct RogueInt32_List : RogueObject
{
  // PROPERTIES
  #line 6
  RogueArray* data;
  #line 7
  RogueInt32 count;

};

#line 4
struct RogueTransition_List : RogueObject
{
  // PROPERTIES
  #line 6
  RogueArray* data;
  #line 7
  RogueInt32 count;

};

#line 19 "../ScanTableBuilder.rogue"
struct RogueClassTransition : RogueObject
{
  // PROPERTIES
  RogueCharacter character;
  RogueClassTransitionActions actions;
  RogueInt32 value;
  RogueClassScanState* target_state;

};

#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Runtime.rogue"
struct RogueClassRuntime : RogueObject
{
  // PROPERTIES

};

#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/System.rogue"
struct RogueClassSystem : RogueObject
{
  // PROPERTIES

};

#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/WeakReference.rogue"
struct RogueWeakReference : RogueObject
{
  // PROPERTIES
  #line 3
  RogueWeakReference* next_weak_reference;
  #line 4
  RogueObject* value;

};

#line 76 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
struct RogueClassFunction_1670 : RogueObject
{
  // PROPERTIES
  RogueClassConsole* console;

};

#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Exception.rogue"
struct RogueException : RogueObject
{
  // PROPERTIES
  #line 3
  RogueString* message;
  #line 4
  RogueClassStackTrace* stack_trace;

};

#line 42
struct RogueClassError : RogueException
{
  // PROPERTIES

};

#line 67
struct RogueClassOutOfBoundsError : RogueClassError
{
  // PROPERTIES

};


// ROGUE TYPES
extern RogueType* RogueTypeGlobal;
extern RogueType* RogueTypePrintWriter_global_output_buffer_;
extern RogueType* RogueTypePrintWriter;
extern RogueType* RogueTypeStringBuilder;
extern RogueType* RogueTypeByte_List;
extern RogueType* RogueTypeGenericList;
extern RogueType* RogueTypeByte;
extern RogueType* RogueTypeArray;
extern RogueType* RogueTypeInt32;
extern RogueType* RogueTypeStringBuilderPool;
extern RogueType* RogueTypeStringBuilder_List;
extern RogueType* RogueTypeLogical;
extern RogueType* RogueType_Function____List;
extern RogueType* RogueType_Function___;
extern RogueType* RogueTypeString;
extern RogueType* RogueTypeStackTrace;
extern RogueType* RogueTypeString_List;
extern RogueType* RogueTypeReal64;
extern RogueType* RogueTypeInt64;
extern RogueType* RogueTypeCharacter;
extern RogueType* RogueTypeCharacter_List;
extern RogueType* RogueTypeReader_Character_;
extern RogueType* RogueTypeConsole;
extern RogueType* RogueTypePrintWriter_output_buffer_;
extern RogueType* RogueTypeConsoleErrorPrinter;
extern RogueType* RogueTypeMath;
extern RogueType* RogueTypeFunction_540;
extern RogueType* RogueTypeBossScanTableBuilder;
extern RogueType* RogueTypeScanTableBuilder;
extern RogueType* RogueTypeScanState;
extern RogueType* RogueTypeInt32_List;
extern RogueType* RogueTypeTransition_List;
extern RogueType* RogueTypeTransition;
extern RogueType* RogueTypeRuntime;
extern RogueType* RogueTypeSystem;
extern RogueType* RogueTypeWeakReference;
extern RogueType* RogueTypeFunction_1670;
extern RogueType* RogueTypeObject;
extern RogueType* RogueTypeException;
extern RogueType* RogueTypeError;
extern RogueType* RogueTypeOutOfBoundsError;
extern RogueType* RogueTypeOptionalInt32;
extern RogueType* RogueTypeStateFlags;
extern RogueType* RogueTypeTransitionActions;
extern RogueType* RogueTypeSystemEnvironment;
extern RogueType* RogueTypeTokenType;

// ROUTINE PROTOTYPES
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/StringBuilder.rogue"
ROGUE_EXPORT_C void RogueStringBuilder__init_class_thread_local();
#line 3 "../../Rogue/Programs/RogueC/Libraries/Standard/String.rogue"
ROGUE_EXPORT_C RogueString* RogueString__create__Byte_List( RogueByte_List* utf8_0 );
#line 61
ROGUE_EXPORT_C RogueString* RogueString__operatorPLUS__String_String( RogueString* st_0, RogueString* value_1 );
#line 64
ROGUE_EXPORT_C RogueString* RogueString__operatorTIMES__String_Int32( RogueString* st_0, RogueInt32 value_1 );
#line 742 "../../Rogue/Programs/RogueC/Libraries/Standard/Primitives.rogue"
ROGUE_EXPORT_C RogueCharacter RogueCharacter__create__Int32( RogueInt32 value_0 );
#line 745
ROGUE_EXPORT_C RogueCharacter RogueCharacter__create__Character( RogueCharacter value_0 );
#line 61 "../../Rogue/Programs/RogueC/Libraries/Standard/Math.rogue"
ROGUE_EXPORT_C RogueInt32 RogueMath__max__Int32_Int32( RogueInt32 a_0, RogueInt32 b_1 );
#line 96
ROGUE_EXPORT_C RogueInt64 RogueMath__mod__Int64_Int64( RogueInt64 a_0, RogueInt64 b_1 );
#line 118
ROGUE_EXPORT_C RogueInt64 RogueMath__shift_right__Int64_Int64( RogueInt64 value_0, RogueInt64 bits_1 );
#line 3 "../../Rogue/Programs/RogueC/Libraries/Standard/Runtime.rogue"
ROGUE_EXPORT_C void RogueRuntime__init_class();
#line 91
ROGUE_EXPORT_C void RogueRuntime__set_gc_threshold__Int32( RogueInt32 value_0 );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/System.rogue"
ROGUE_EXPORT_C void RogueSystem__init_class();
#line 3 "../../Rogue/Programs/RogueC/Libraries/Standard/Optional.rogue"
ROGUE_EXPORT   RogueOptionalInt32 RogueOptionalInt32__create();
#line 3 "../ScanTableBuilder.rogue"
ROGUE_EXPORT_C void RogueStateFlags__init_class();
#line 10
ROGUE_EXPORT_C void RogueTransitionActions__init_class();
#line 3 "../Boss.rogue"
ROGUE_EXPORT_C void RogueTokenType__init_class();

// METHOD PROTOTYPES
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Global.rogue"
ROGUE_EXPORT_C RogueClassGlobal* RogueGlobal__init_object( RogueClassGlobal* THIS );
#line 8
ROGUE_EXPORT_C RogueClassGlobal* RogueGlobal__init( RogueClassGlobal* THIS );
#line 1
ROGUE_EXPORT_C RogueString* RogueGlobal__type_name( RogueClassGlobal* THIS );
#line 47 "../../Rogue/Programs/RogueC/Libraries/Standard/PrintWriter.rogue"
ROGUE_EXPORT_C RogueClassGlobal* RogueGlobal__flush( RogueClassGlobal* THIS );
#line 77
ROGUE_EXPORT_C RogueClassGlobal* RogueGlobal__print__Object( RogueClassGlobal* THIS, RogueObject* value_0 );
#line 94
ROGUE_EXPORT_C RogueClassGlobal* RogueGlobal__println( RogueClassGlobal* THIS );
#line 122
ROGUE_EXPORT_C RogueClassGlobal* RogueGlobal__println__Object( RogueClassGlobal* THIS, RogueObject* value_0 );
#line 27 "../../Rogue/Programs/RogueC/Libraries/Standard/Global.rogue"
ROGUE_EXPORT_C RogueClassGlobal* RogueGlobal__write__StringBuilder( RogueClassGlobal* THIS, RogueStringBuilder* buffer_0 );
#line 9 "../Boss.rogue"
ROGUE_EXPORT_C void RogueGlobal__on_launch( RogueClassGlobal* THIS );
#line 0 "[Built-in Type]"
ROGUE_EXPORT_C void RogueGlobal__run_tests( RogueClassGlobal* THIS );
#line 11 "../../Rogue/Programs/RogueC/Libraries/Standard/Global.rogue"
ROGUE_EXPORT_C void RogueGlobal__call_exit_functions( RogueClassGlobal* THIS );
#line 23
ROGUE_EXPORT_C void RogueGlobal__on_exit___Function___( RogueClassGlobal* THIS, RogueClass_Function___* fn_0 );
#line 47 "../../Rogue/Programs/RogueC/Libraries/Standard/PrintWriter.rogue"
ROGUE_EXPORT_C RogueClassPrintWriter_global_output_buffer_* RoguePrintWriter_global_output_buffer___flush( RogueObject* THIS );
#line 38
ROGUE_EXPORT_C RogueClassPrintWriter_global_output_buffer_* RoguePrintWriter_global_output_buffer___write__StringBuilder( RogueObject* THIS, RogueStringBuilder* buffer_0 );
#line 8
ROGUE_EXPORT_C RogueClassPrintWriter* RoguePrintWriter__flush( RogueObject* THIS );
#line 38
ROGUE_EXPORT_C RogueClassPrintWriter* RoguePrintWriter__write__StringBuilder( RogueObject* THIS, RogueStringBuilder* buffer_0 );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/StringBuilder.rogue"
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__init_object( RogueStringBuilder* THIS );
#line 23
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__init( RogueStringBuilder* THIS );
#line 450
ROGUE_EXPORT_C RogueString* RogueStringBuilder__to_String( RogueStringBuilder* THIS );
#line 1
ROGUE_EXPORT_C RogueString* RogueStringBuilder__type_name( RogueStringBuilder* THIS );
#line 26
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__init__Int32( RogueStringBuilder* THIS, RogueInt32 initial_capacity_0 );
#line 39
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__clear( RogueStringBuilder* THIS );
#line 131
ROGUE_EXPORT_C RogueLogical RogueStringBuilder__needs_indent( RogueStringBuilder* THIS );
#line 153
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__print__Character_Logical( RogueStringBuilder* THIS, RogueCharacter value_0, RogueLogical formatted_1 );
#line 179
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__print__Int32( RogueStringBuilder* THIS, RogueInt32 value_0 );
#line 186
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__print__Int64( RogueStringBuilder* THIS, RogueInt64 value_0 );
#line 200
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__print__Object( RogueStringBuilder* THIS, RogueObject* value_0 );
#line 273
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__print__String( RogueStringBuilder* THIS, RogueString* value_0 );
#line 287
ROGUE_EXPORT_C void RogueStringBuilder__print_indent( RogueStringBuilder* THIS );
#line 327
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__println( RogueStringBuilder* THIS );
#line 360
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__println__String( RogueStringBuilder* THIS, RogueString* value_0 );
#line 380
ROGUE_EXPORT_C RogueStringBuilder* RogueStringBuilder__reserve__Int32( RogueStringBuilder* THIS, RogueInt32 additional_bytes_0 );
#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
ROGUE_EXPORT_C RogueByte_List* RogueByte_List__init_object( RogueByte_List* THIS );
#line 10
ROGUE_EXPORT_C RogueByte_List* RogueByte_List__init( RogueByte_List* THIS );
#line 633
ROGUE_EXPORT_C RogueString* RogueByte_List__to_String( RogueByte_List* THIS );
#line 4
ROGUE_EXPORT_C RogueString* RogueByte_List__type_name( RogueByte_List* THIS );
#line 13
ROGUE_EXPORT_C RogueByte_List* RogueByte_List__init__Int32( RogueByte_List* THIS, RogueInt32 initial_capacity_0 );
#line 58
ROGUE_EXPORT_C RogueByte_List* RogueByte_List__add__Byte( RogueByte_List* THIS, RogueByte value_0 );
#line 68
ROGUE_EXPORT_C RogueInt32 RogueByte_List__capacity( RogueByte_List* THIS );
#line 72
ROGUE_EXPORT_C RogueByte_List* RogueByte_List__clear( RogueByte_List* THIS );
#line 115
ROGUE_EXPORT_C RogueByte RogueByte_List__first( RogueByte_List* THIS );
#line 174
ROGUE_EXPORT_C RogueByte_List* RogueByte_List__discard_from__Int32( RogueByte_List* THIS, RogueInt32 index_0 );
#line 467
ROGUE_EXPORT_C RogueByte_List* RogueByte_List__reserve__Int32( RogueByte_List* THIS, RogueInt32 additional_elements_0 );
#line 504
ROGUE_EXPORT_C RogueByte RogueByte_List__remove_at__Int32( RogueByte_List* THIS, RogueInt32 index_0 );
#line 514
ROGUE_EXPORT_C RogueByte RogueByte_List__remove_first( RogueByte_List* THIS );
#line 562
ROGUE_EXPORT_C void RogueByte_List__set__Int32_Byte( RogueByte_List* THIS, RogueInt32 index_0, RogueByte new_value_1 );
#line 1
ROGUE_EXPORT_C RogueClassGenericList* RogueGenericList__init_object( RogueClassGenericList* THIS );
ROGUE_EXPORT_C RogueString* RogueGenericList__type_name( RogueClassGenericList* THIS );
#line 986 "../../Rogue/Programs/RogueC/Libraries/Standard/Primitives.rogue"
ROGUE_EXPORT_C RogueString* RogueByte__to_String( RogueByte THIS );
#line 18 "../../Rogue/Programs/RogueC/Libraries/Standard/Array.rogue"
ROGUE_EXPORT_C RogueString* RogueArray_Byte___type_name( RogueArray* THIS );
#line 1
ROGUE_EXPORT_C RogueString* RogueArray__type_name( RogueArray* THIS );
#line 3
ROGUE_EXPORT_C RogueInt32 RogueArray__count( RogueArray* THIS );
#line 6
ROGUE_EXPORT_C RogueInt32 RogueArray__element_size( RogueArray* THIS );
#line 9
ROGUE_EXPORT_C RogueArray* RogueArray__set__Int32_Array_Int32_Int32( RogueArray* THIS, RogueInt32 i1_0, RogueArray* other_1, RogueInt32 other_i1_2, RogueInt32 copy_count_3 );
#line 12
ROGUE_EXPORT_C void RogueArray__zero__Int32_Int32( RogueArray* THIS, RogueInt32 i1_0, RogueInt32 n_1 );
#line 648 "../../Rogue/Programs/RogueC/Libraries/Standard/Primitives.rogue"
ROGUE_EXPORT_C RogueInt32 RogueInt32__or_smaller__Int32( RogueInt32 THIS, RogueInt32 other_0 );
#line 677
ROGUE_EXPORT_C RogueString* RogueInt32__to_String( RogueInt32 THIS );
#line 689
ROGUE_EXPORT_C RogueCharacter RogueInt32__to_digit__Logical( RogueInt32 THIS, RogueLogical base64_0 );
#line 461 "../../Rogue/Programs/RogueC/Libraries/Standard/StringBuilder.rogue"
ROGUE_EXPORT_C RogueClassStringBuilderPool* RogueStringBuilderPool__init_object( RogueClassStringBuilderPool* THIS );
ROGUE_EXPORT_C RogueString* RogueStringBuilderPool__type_name( RogueClassStringBuilderPool* THIS );
#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
ROGUE_EXPORT_C RogueStringBuilder_List* RogueStringBuilder_List__init_object( RogueStringBuilder_List* THIS );
#line 10
ROGUE_EXPORT_C RogueStringBuilder_List* RogueStringBuilder_List__init( RogueStringBuilder_List* THIS );
#line 633
ROGUE_EXPORT_C RogueString* RogueStringBuilder_List__to_String( RogueStringBuilder_List* THIS );
#line 4
ROGUE_EXPORT_C RogueString* RogueStringBuilder_List__type_name( RogueStringBuilder_List* THIS );
#line 13
ROGUE_EXPORT_C RogueStringBuilder_List* RogueStringBuilder_List__init__Int32( RogueStringBuilder_List* THIS, RogueInt32 initial_capacity_0 );
#line 68
ROGUE_EXPORT_C RogueInt32 RogueStringBuilder_List__capacity( RogueStringBuilder_List* THIS );
#line 72
ROGUE_EXPORT_C RogueStringBuilder_List* RogueStringBuilder_List__clear( RogueStringBuilder_List* THIS );
#line 174
ROGUE_EXPORT_C RogueStringBuilder_List* RogueStringBuilder_List__discard_from__Int32( RogueStringBuilder_List* THIS, RogueInt32 index_0 );
#line 18 "../../Rogue/Programs/RogueC/Libraries/Standard/Array.rogue"
ROGUE_EXPORT_C RogueString* RogueArray_StringBuilder___type_name( RogueArray* THIS );
#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
ROGUE_EXPORT_C Rogue_Function____List* Rogue_Function____List__init_object( Rogue_Function____List* THIS );
#line 10
ROGUE_EXPORT_C Rogue_Function____List* Rogue_Function____List__init( Rogue_Function____List* THIS );
#line 633
ROGUE_EXPORT_C RogueString* Rogue_Function____List__to_String( Rogue_Function____List* THIS );
#line 4
ROGUE_EXPORT_C RogueString* Rogue_Function____List__type_name( Rogue_Function____List* THIS );
#line 13
ROGUE_EXPORT_C Rogue_Function____List* Rogue_Function____List__init__Int32( Rogue_Function____List* THIS, RogueInt32 initial_capacity_0 );
#line 58
ROGUE_EXPORT_C Rogue_Function____List* Rogue_Function____List__add___Function___( Rogue_Function____List* THIS, RogueClass_Function___* value_0 );
#line 68
ROGUE_EXPORT_C RogueInt32 Rogue_Function____List__capacity( Rogue_Function____List* THIS );
#line 72
ROGUE_EXPORT_C Rogue_Function____List* Rogue_Function____List__clear( Rogue_Function____List* THIS );
#line 174
ROGUE_EXPORT_C Rogue_Function____List* Rogue_Function____List__discard_from__Int32( Rogue_Function____List* THIS, RogueInt32 index_0 );
#line 467
ROGUE_EXPORT_C Rogue_Function____List* Rogue_Function____List__reserve__Int32( Rogue_Function____List* THIS, RogueInt32 additional_elements_0 );
#line 562
ROGUE_EXPORT_C void Rogue_Function____List__set__Int32__Function___( Rogue_Function____List* THIS, RogueInt32 index_0, RogueClass_Function___* new_value_1 );
#line 33 "../../Rogue/Programs/RogueC/Libraries/Standard/Task.rogue"
ROGUE_EXPORT_C RogueClass_Function___* Rogue_Function_____init_object( RogueClass_Function___* THIS );
ROGUE_EXPORT_C RogueString* Rogue_Function_____type_name( RogueClass_Function___* THIS );
ROGUE_EXPORT_C void Rogue_Function_____call( RogueClass_Function___* THIS );
#line 18 "../../Rogue/Programs/RogueC/Libraries/Standard/Array.rogue"
ROGUE_EXPORT_C RogueString* RogueArray__Function______type_name( RogueArray* THIS );
#line 963 "../../Rogue/Programs/RogueC/Libraries/Standard/String.rogue"
ROGUE_EXPORT_C RogueString* RogueString__to_String( RogueString* THIS );
#line 1
ROGUE_EXPORT_C RogueString* RogueString__type_name( RogueString* THIS );
#line 74
ROGUE_EXPORT_C RogueString* RogueString__after__Int32( RogueString* THIS, RogueInt32 index_0 );
#line 101
ROGUE_EXPORT_C RogueString* RogueString__after_last__Character_Logical( RogueString* THIS, RogueCharacter ch_0, RogueLogical ignore_case_1 );
#line 119
ROGUE_EXPORT_C RogueString* RogueString__before__Int32( RogueString* THIS, RogueInt32 index_0 );
#line 126
ROGUE_EXPORT_C RogueString* RogueString__before_first__Character_Logical( RogueString* THIS, RogueCharacter ch_0, RogueLogical ignore_case_1 );
#line 164
ROGUE_EXPORT_C RogueByte RogueString__byte__Int32( RogueString* THIS, RogueInt32 byte_index_0 );
#line 167
ROGUE_EXPORT_C RogueInt32 RogueString__byte_count( RogueString* THIS );
#line 190
ROGUE_EXPORT_C RogueLogical RogueString__contains__Character_Logical( RogueString* THIS, RogueCharacter ch_0, RogueLogical ignore_case_1 );
#line 196
ROGUE_EXPORT_C RogueLogical RogueString__contains_at__String_Int32_Logical( RogueString* THIS, RogueString* substring_0, RogueInt32 at_index_1, RogueLogical ignore_case_2 );
#line 217
ROGUE_EXPORT_C RogueInt32 RogueString__count( RogueString* THIS );
#line 242
ROGUE_EXPORT_C RogueLogical RogueString__ends_with__Character_Logical( RogueString* THIS, RogueCharacter ch_0, RogueLogical ignore_case_1 );
#line 249
ROGUE_EXPORT_C RogueLogical RogueString__ends_with__String_Logical( RogueString* THIS, RogueString* other_0, RogueLogical ignore_case_1 );
#line 409
ROGUE_EXPORT_C RogueString* RogueString__from__Int32( RogueString* THIS, RogueInt32 i1_0 );
#line 412
ROGUE_EXPORT_C RogueString* RogueString__from__Int32_Int32( RogueString* THIS, RogueInt32 i1_0, RogueInt32 i2_1 );
#line 429
ROGUE_EXPORT_C RogueString* RogueString__from_first__Character_Logical( RogueString* THIS, RogueCharacter ch_0, RogueLogical ignore_case_1 );
#line 449
ROGUE_EXPORT_C RogueCharacter RogueString__get__Int32( RogueString* THIS, RogueInt32 index_0 );
#line 513
ROGUE_EXPORT_C RogueCharacter RogueString__last( RogueString* THIS );
#line 516
ROGUE_EXPORT_C RogueString* RogueString__left_justified__Int32_Character( RogueString* THIS, RogueInt32 spaces_0, RogueCharacter fill_1 );
#line 538
ROGUE_EXPORT   RogueOptionalInt32 RogueString__locate__Character_OptionalInt32_Logical( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInt32 optional_i1_1, RogueLogical ignore_case_2 );
#line 556
ROGUE_EXPORT   RogueOptionalInt32 RogueString__locate__String_OptionalInt32_Logical( RogueString* THIS, RogueString* other_0, RogueOptionalInt32 optional_i1_1, RogueLogical ignore_case_2 );
#line 577
ROGUE_EXPORT   RogueOptionalInt32 RogueString__locate_last__Character_OptionalInt32_Logical( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInt32 starting_index_1, RogueLogical ignore_case_2 );
#line 615
ROGUE_EXPORT_C RogueString* RogueString__operatorPLUS__Byte( RogueString* THIS, RogueByte value_0 );
#line 618
ROGUE_EXPORT_C RogueString* RogueString__operatorPLUS__Character( RogueString* THIS, RogueCharacter value_0 );
#line 621
ROGUE_EXPORT_C RogueString* RogueString__operatorPLUS__Int32( RogueString* THIS, RogueInt32 value_0 );
#line 681
ROGUE_EXPORT_C RogueString* RogueString__operatorPLUS__String( RogueString* THIS, RogueString* value_0 );
#line 687
ROGUE_EXPORT_C RogueString* RogueString__operatorTIMES__Int32( RogueString* THIS, RogueInt32 value_0 );
#line 690
ROGUE_EXPORT_C RogueString* RogueString__pluralized__Int32( RogueString* THIS, RogueInt32 quantity_0 );
#line 795
ROGUE_EXPORT_C RogueString* RogueString__replacing__String_String_Logical( RogueString* THIS, RogueString* look_for_0, RogueString* replace_with_1, RogueLogical ignore_case_2 );
#line 868
ROGUE_EXPORT_C RogueString_List* RogueString__split__Character_Logical( RogueString* THIS, RogueCharacter separator_0, RogueLogical ignore_case_1 );
#line 929
ROGUE_EXPORT_C RogueString* RogueString__times__Int32( RogueString* THIS, RogueInt32 n_0 );
#line 959
ROGUE_EXPORT_C RogueReal64 RogueString__to_Real64( RogueString* THIS );
#line 1002
ROGUE_EXPORT_C RogueString* RogueString__trimmed( RogueString* THIS );
#line 1037
ROGUE_EXPORT_C RogueString_List* RogueString__word_wrap__Int32_String( RogueString* THIS, RogueInt32 width_0, RogueString* allow_break_after_1 );
#line 1044
ROGUE_EXPORT_C RogueStringBuilder* RogueString__word_wrap__Int32_StringBuilder_String( RogueString* THIS, RogueInt32 width_0, RogueStringBuilder* buffer_1, RogueString* allow_break_after_2 );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/StackTrace.rogue"
ROGUE_EXPORT_C RogueClassStackTrace* RogueStackTrace__init_object( RogueClassStackTrace* THIS );
#line 52
ROGUE_EXPORT_C RogueString* RogueStackTrace__to_String( RogueClassStackTrace* THIS );
#line 1
ROGUE_EXPORT_C RogueString* RogueStackTrace__type_name( RogueClassStackTrace* THIS );
#line 8
ROGUE_EXPORT_C RogueClassStackTrace* RogueStackTrace__init__Int32( RogueClassStackTrace* THIS, RogueInt32 omit_count_0 );
#line 24
ROGUE_EXPORT_C void RogueStackTrace__format( RogueClassStackTrace* THIS );
#line 41
ROGUE_EXPORT_C void RogueStackTrace__print( RogueClassStackTrace* THIS );
#line 45
ROGUE_EXPORT_C RogueStringBuilder* RogueStackTrace__print__StringBuilder( RogueClassStackTrace* THIS, RogueStringBuilder* buffer_0 );
#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
ROGUE_EXPORT_C RogueString_List* RogueString_List__init_object( RogueString_List* THIS );
#line 10
ROGUE_EXPORT_C RogueString_List* RogueString_List__init( RogueString_List* THIS );
#line 633
ROGUE_EXPORT_C RogueString* RogueString_List__to_String( RogueString_List* THIS );
#line 4
ROGUE_EXPORT_C RogueString* RogueString_List__type_name( RogueString_List* THIS );
#line 13
ROGUE_EXPORT_C RogueString_List* RogueString_List__init__Int32( RogueString_List* THIS, RogueInt32 initial_capacity_0 );
#line 58
ROGUE_EXPORT_C RogueString_List* RogueString_List__add__String( RogueString_List* THIS, RogueString* value_0 );
#line 68
ROGUE_EXPORT_C RogueInt32 RogueString_List__capacity( RogueString_List* THIS );
#line 72
ROGUE_EXPORT_C RogueString_List* RogueString_List__clear( RogueString_List* THIS );
#line 174
ROGUE_EXPORT_C RogueString_List* RogueString_List__discard_from__Int32( RogueString_List* THIS, RogueInt32 index_0 );
#line 467
ROGUE_EXPORT_C RogueString_List* RogueString_List__reserve__Int32( RogueString_List* THIS, RogueInt32 additional_elements_0 );
#line 562
ROGUE_EXPORT_C void RogueString_List__set__Int32_String( RogueString_List* THIS, RogueInt32 index_0, RogueString* new_value_1 );
#line 823
ROGUE_EXPORT_C RogueString* RogueString_List__join__String( RogueString_List* THIS, RogueString* separator_0 );
#line 18 "../../Rogue/Programs/RogueC/Libraries/Standard/Array.rogue"
ROGUE_EXPORT_C RogueString* RogueArray_String___type_name( RogueArray* THIS );
#line 476 "../../Rogue/Programs/RogueC/Libraries/Standard/Primitives.rogue"
ROGUE_EXPORT_C RogueStringBuilder* RogueInt64__print_in_power2_base__Int32_Int32_StringBuilder( RogueInt64 THIS, RogueInt32 base_0, RogueInt32 digits_1, RogueStringBuilder* buffer_2 );
#line 557
ROGUE_EXPORT_C RogueString* RogueInt64__to_hex_string__Int32( RogueInt64 THIS, RogueInt32 digits_0 );
#line 794
ROGUE_EXPORT_C RogueLogical RogueCharacter__is_letter( RogueCharacter THIS );
#line 807
ROGUE_EXPORT_C RogueLogical RogueCharacter__is_uppercase( RogueCharacter THIS );
#line 835
ROGUE_EXPORT_C RogueString* RogueCharacter__to_String( RogueCharacter THIS );
#line 892
ROGUE_EXPORT_C RogueCharacter RogueCharacter__to_lowercase( RogueCharacter THIS );
#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
ROGUE_EXPORT_C RogueCharacter_List* RogueCharacter_List__init_object( RogueCharacter_List* THIS );
#line 10
ROGUE_EXPORT_C RogueCharacter_List* RogueCharacter_List__init( RogueCharacter_List* THIS );
#line 633
ROGUE_EXPORT_C RogueString* RogueCharacter_List__to_String( RogueCharacter_List* THIS );
#line 4
ROGUE_EXPORT_C RogueString* RogueCharacter_List__type_name( RogueCharacter_List* THIS );
#line 13
ROGUE_EXPORT_C RogueCharacter_List* RogueCharacter_List__init__Int32( RogueCharacter_List* THIS, RogueInt32 initial_capacity_0 );
#line 58
ROGUE_EXPORT_C RogueCharacter_List* RogueCharacter_List__add__Character( RogueCharacter_List* THIS, RogueCharacter value_0 );
#line 68
ROGUE_EXPORT_C RogueInt32 RogueCharacter_List__capacity( RogueCharacter_List* THIS );
#line 72
ROGUE_EXPORT_C RogueCharacter_List* RogueCharacter_List__clear( RogueCharacter_List* THIS );
#line 174
ROGUE_EXPORT_C RogueCharacter_List* RogueCharacter_List__discard_from__Int32( RogueCharacter_List* THIS, RogueInt32 index_0 );
#line 467
ROGUE_EXPORT_C RogueCharacter_List* RogueCharacter_List__reserve__Int32( RogueCharacter_List* THIS, RogueInt32 additional_elements_0 );
#line 562
ROGUE_EXPORT_C void RogueCharacter_List__set__Int32_Character( RogueCharacter_List* THIS, RogueInt32 index_0, RogueCharacter new_value_1 );
#line 18 "../../Rogue/Programs/RogueC/Libraries/Standard/Array.rogue"
ROGUE_EXPORT_C RogueString* RogueArray_Character___type_name( RogueArray* THIS );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
ROGUE_EXPORT_C RogueClassConsole* RogueConsole__init_object( RogueClassConsole* THIS );
#line 70
ROGUE_EXPORT_C RogueClassConsole* RogueConsole__init( RogueClassConsole* THIS );
#line 46 "../../Rogue/Programs/RogueC/Libraries/Standard/Reader.rogue"
ROGUE_EXPORT_C RogueString* RogueConsole__to_String( RogueClassConsole* THIS );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
ROGUE_EXPORT_C RogueString* RogueConsole__type_name( RogueClassConsole* THIS );
#line 95
ROGUE_EXPORT_C RogueLogical RogueConsole__has_another( RogueClassConsole* THIS );
#line 192
ROGUE_EXPORT_C RogueCharacter RogueConsole__read( RogueClassConsole* THIS );
#line 47 "../../Rogue/Programs/RogueC/Libraries/Standard/PrintWriter.rogue"
ROGUE_EXPORT_C RogueClassConsole* RogueConsole__flush( RogueClassConsole* THIS );
#line 287 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
ROGUE_EXPORT_C RogueClassConsole* RogueConsole__write__StringBuilder( RogueClassConsole* THIS, RogueStringBuilder* buffer_0 );
#line 84
ROGUE_EXPORT_C void RogueConsole__fill_input_queue( RogueClassConsole* THIS );
#line 214
ROGUE_EXPORT_C void RogueConsole__reset_input_mode( RogueClassConsole* THIS );
#line 268
ROGUE_EXPORT_C RogueInt32 RogueConsole__width( RogueClassConsole* THIS );
#line 47 "../../Rogue/Programs/RogueC/Libraries/Standard/PrintWriter.rogue"
ROGUE_EXPORT_C RogueClassPrintWriter_output_buffer_* RoguePrintWriter_output_buffer___flush( RogueObject* THIS );
#line 38
ROGUE_EXPORT_C RogueClassPrintWriter_output_buffer_* RoguePrintWriter_output_buffer___write__StringBuilder( RogueObject* THIS, RogueStringBuilder* buffer_0 );
#line 300 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
ROGUE_EXPORT_C RogueClassConsoleErrorPrinter* RogueConsoleErrorPrinter__init_object( RogueClassConsoleErrorPrinter* THIS );
ROGUE_EXPORT_C RogueString* RogueConsoleErrorPrinter__type_name( RogueClassConsoleErrorPrinter* THIS );
#line 47 "../../Rogue/Programs/RogueC/Libraries/Standard/PrintWriter.rogue"
ROGUE_EXPORT_C RogueClassConsoleErrorPrinter* RogueConsoleErrorPrinter__flush( RogueClassConsoleErrorPrinter* THIS );
#line 314 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
ROGUE_EXPORT_C RogueClassConsoleErrorPrinter* RogueConsoleErrorPrinter__write__StringBuilder( RogueClassConsoleErrorPrinter* THIS, RogueStringBuilder* buffer_0 );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Math.rogue"
ROGUE_EXPORT_C RogueClassMath* RogueMath__init_object( RogueClassMath* THIS );
ROGUE_EXPORT_C RogueString* RogueMath__type_name( RogueClassMath* THIS );
#line 9 "../../Rogue/Programs/RogueC/Libraries/Standard/Global.rogue"
ROGUE_EXPORT_C RogueClassFunction_540* RogueFunction_540__init_object( RogueClassFunction_540* THIS );
ROGUE_EXPORT_C RogueString* RogueFunction_540__type_name( RogueClassFunction_540* THIS );
ROGUE_EXPORT_C void RogueFunction_540__call( RogueClassFunction_540* THIS );
#line 11 "../Boss.rogue"
ROGUE_EXPORT_C RogueClassBossScanTableBuilder* RogueBossScanTableBuilder__init_object( RogueClassBossScanTableBuilder* THIS );
#line 13
ROGUE_EXPORT_C RogueClassBossScanTableBuilder* RogueBossScanTableBuilder__init( RogueClassBossScanTableBuilder* THIS );
#line 11
ROGUE_EXPORT_C RogueString* RogueBossScanTableBuilder__type_name( RogueClassBossScanTableBuilder* THIS );
#line 101 "../ScanTableBuilder.rogue"
ROGUE_EXPORT_C RogueClassScanTableBuilder* RogueScanTableBuilder__init_object( RogueClassScanTableBuilder* THIS );
ROGUE_EXPORT_C RogueString* RogueScanTableBuilder__type_name( RogueClassScanTableBuilder* THIS );
#line 24
ROGUE_EXPORT_C RogueClassScanState* RogueScanState__init_object( RogueClassScanState* THIS );
ROGUE_EXPORT_C RogueString* RogueScanState__type_name( RogueClassScanState* THIS );
#line 39
ROGUE_EXPORT   RogueClassScanState* RogueScanState__init__Int32_Int32_StateFlags( RogueClassScanState* THIS, RogueInt32 _auto_636_0, RogueInt32 _auto_637_1, RogueClassStateFlags _auto_638_2 );
#line 42
ROGUE_EXPORT_C RogueClassScanState* RogueScanState__accept( RogueClassScanState* THIS );
#line 46
ROGUE_EXPORT_C void RogueScanState__advance__ScanState( RogueClassScanState* THIS, RogueClassScanState* target_state_0 );
#line 53
ROGUE_EXPORT_C RogueClassScanState* RogueScanState__find_link__Character( RogueClassScanState* THIS, RogueCharacter ch_0 );
#line 59
ROGUE_EXPORT_C RogueClassScanState* RogueScanState__link__Character_Int32_Int32( RogueClassScanState* THIS, RogueCharacter ch_0, RogueInt32 type_1, RogueInt32 option_2 );
#line 62
ROGUE_EXPORT   RogueClassScanState* RogueScanState__link__Character_TransitionActions_Int32_Int32_Int32( RogueClassScanState* THIS, RogueCharacter ch_0, RogueClassTransitionActions action_1, RogueInt32 value_2, RogueInt32 type_3, RogueInt32 option_4 );
#line 85
ROGUE_EXPORT_C void RogueScanState__link_alpha__ScanState( RogueClassScanState* THIS, RogueClassScanState* target_state_0 );
#line 88
ROGUE_EXPORT_C void RogueScanState__link_default__ScanState( RogueClassScanState* THIS, RogueClassScanState* target_state_0 );
#line 91
ROGUE_EXPORT_C void RogueScanState__link_numeric__ScanState( RogueClassScanState* THIS, RogueClassScanState* target_state_0 );
#line 94
ROGUE_EXPORT   RogueClassScanState* RogueScanState__new_link__Character_TransitionActions_Int32_Int32_Int32( RogueClassScanState* THIS, RogueCharacter ch_0, RogueClassTransitionActions action_1, RogueInt32 value_2, RogueInt32 type_3, RogueInt32 option_4 );
#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
ROGUE_EXPORT_C RogueInt32_List* RogueInt32_List__init_object( RogueInt32_List* THIS );
#line 10
ROGUE_EXPORT_C RogueInt32_List* RogueInt32_List__init( RogueInt32_List* THIS );
#line 633
ROGUE_EXPORT_C RogueString* RogueInt32_List__to_String( RogueInt32_List* THIS );
#line 4
ROGUE_EXPORT_C RogueString* RogueInt32_List__type_name( RogueInt32_List* THIS );
#line 13
ROGUE_EXPORT_C RogueInt32_List* RogueInt32_List__init__Int32( RogueInt32_List* THIS, RogueInt32 initial_capacity_0 );
#line 58
ROGUE_EXPORT_C RogueInt32_List* RogueInt32_List__add__Int32( RogueInt32_List* THIS, RogueInt32 value_0 );
#line 68
ROGUE_EXPORT_C RogueInt32 RogueInt32_List__capacity( RogueInt32_List* THIS );
#line 72
ROGUE_EXPORT_C RogueInt32_List* RogueInt32_List__clear( RogueInt32_List* THIS );
#line 174
ROGUE_EXPORT_C RogueInt32_List* RogueInt32_List__discard_from__Int32( RogueInt32_List* THIS, RogueInt32 index_0 );
#line 467
ROGUE_EXPORT_C RogueInt32_List* RogueInt32_List__reserve__Int32( RogueInt32_List* THIS, RogueInt32 additional_elements_0 );
#line 562
ROGUE_EXPORT_C void RogueInt32_List__set__Int32_Int32( RogueInt32_List* THIS, RogueInt32 index_0, RogueInt32 new_value_1 );
#line 18 "../../Rogue/Programs/RogueC/Libraries/Standard/Array.rogue"
ROGUE_EXPORT_C RogueString* RogueArray_Int32___type_name( RogueArray* THIS );
#line 4 "../../Rogue/Programs/RogueC/Libraries/Standard/List.rogue"
ROGUE_EXPORT_C RogueTransition_List* RogueTransition_List__init_object( RogueTransition_List* THIS );
#line 10
ROGUE_EXPORT_C RogueTransition_List* RogueTransition_List__init( RogueTransition_List* THIS );
#line 633
ROGUE_EXPORT_C RogueString* RogueTransition_List__to_String( RogueTransition_List* THIS );
#line 4
ROGUE_EXPORT_C RogueString* RogueTransition_List__type_name( RogueTransition_List* THIS );
#line 13
ROGUE_EXPORT_C RogueTransition_List* RogueTransition_List__init__Int32( RogueTransition_List* THIS, RogueInt32 initial_capacity_0 );
#line 58
ROGUE_EXPORT_C RogueTransition_List* RogueTransition_List__add__Transition( RogueTransition_List* THIS, RogueClassTransition* value_0 );
#line 68
ROGUE_EXPORT_C RogueInt32 RogueTransition_List__capacity( RogueTransition_List* THIS );
#line 72
ROGUE_EXPORT_C RogueTransition_List* RogueTransition_List__clear( RogueTransition_List* THIS );
#line 174
ROGUE_EXPORT_C RogueTransition_List* RogueTransition_List__discard_from__Int32( RogueTransition_List* THIS, RogueInt32 index_0 );
#line 467
ROGUE_EXPORT_C RogueTransition_List* RogueTransition_List__reserve__Int32( RogueTransition_List* THIS, RogueInt32 additional_elements_0 );
#line 562
ROGUE_EXPORT_C void RogueTransition_List__set__Int32_Transition( RogueTransition_List* THIS, RogueInt32 index_0, RogueClassTransition* new_value_1 );
#line 19 "../ScanTableBuilder.rogue"
ROGUE_EXPORT_C RogueClassTransition* RogueTransition__init_object( RogueClassTransition* THIS );
#line 21
ROGUE_EXPORT_C RogueClassTransition* RogueTransition__init( RogueClassTransition* THIS );
#line 19
ROGUE_EXPORT_C RogueString* RogueTransition__type_name( RogueClassTransition* THIS );
ROGUE_EXPORT   RogueClassTransition* RogueTransition__init__Character_TransitionActions_Int32_ScanState( RogueClassTransition* THIS, RogueCharacter _auto_639_0, RogueClassTransitionActions _auto_640_1, RogueInt32 _auto_641_2, RogueClassScanState* _auto_642_3 );
#line 18 "../../Rogue/Programs/RogueC/Libraries/Standard/Array.rogue"
ROGUE_EXPORT_C RogueString* RogueArray_Transition___type_name( RogueArray* THIS );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Runtime.rogue"
ROGUE_EXPORT_C RogueClassRuntime* RogueRuntime__init_object( RogueClassRuntime* THIS );
ROGUE_EXPORT_C RogueString* RogueRuntime__type_name( RogueClassRuntime* THIS );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/System.rogue"
ROGUE_EXPORT_C RogueClassSystem* RogueSystem__init_object( RogueClassSystem* THIS );
ROGUE_EXPORT_C RogueString* RogueSystem__type_name( RogueClassSystem* THIS );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/WeakReference.rogue"
ROGUE_EXPORT_C RogueWeakReference* RogueWeakReference__init_object( RogueWeakReference* THIS );
ROGUE_EXPORT_C RogueString* RogueWeakReference__type_name( RogueWeakReference* THIS );
#line 12
ROGUE_EXPORT_C void RogueWeakReference__on_cleanup( RogueWeakReference* THIS );
#line 76 "../../Rogue/Programs/RogueC/Libraries/Standard/Console.rogue"
ROGUE_EXPORT_C RogueClassFunction_1670* RogueFunction_1670__init_object( RogueClassFunction_1670* THIS );
ROGUE_EXPORT_C RogueString* RogueFunction_1670__type_name( RogueClassFunction_1670* THIS );
ROGUE_EXPORT_C void RogueFunction_1670__call( RogueClassFunction_1670* THIS );
ROGUE_EXPORT_C RogueClassFunction_1670* RogueFunction_1670__init__Console( RogueClassFunction_1670* THIS, RogueClassConsole* _auto_1671_0 );
#line 3 "../../Rogue/Programs/RogueC/Libraries/Standard/Object.rogue"
ROGUE_EXPORT_C void RogueObject__init_object( RogueObject* THIS );
#line 6
ROGUE_EXPORT_C RogueObject* RogueObject__init( RogueObject* THIS );
#line 15
ROGUE_EXPORT_C RogueInt64 RogueObject__object_id( RogueObject* THIS );
#line 23
ROGUE_EXPORT_C RogueString* RogueObject__to_String( RogueObject* THIS );
#line 1
ROGUE_EXPORT_C RogueString* RogueObject__type_name( RogueObject* THIS );
#line 1 "../../Rogue/Programs/RogueC/Libraries/Standard/Exception.rogue"
ROGUE_EXPORT_C RogueException* RogueException__init_object( RogueException* THIS );
#line 9
ROGUE_EXPORT_C RogueException* RogueException__init( RogueException* THIS );
#line 24
ROGUE_EXPORT_C RogueString* RogueException__to_String( RogueException* THIS );
#line 1
ROGUE_EXPORT_C RogueString* RogueException__type_name( RogueException* THIS );
#line 7
ROGUE_EXPORT_C RogueException* RogueException__init__String( RogueException* THIS, RogueString* _auto_226_0 );
#line 12
ROGUE_EXPORT_C void RogueException__display( RogueException* THIS );
#line 27
ROGUE_EXPORT_C RogueString* RogueException__format( RogueException* THIS );
#line 42
ROGUE_EXPORT_C RogueClassError* RogueError__init_object( RogueClassError* THIS );
ROGUE_EXPORT_C RogueString* RogueError__type_name( RogueClassError* THIS );
#line 67
ROGUE_EXPORT_C RogueClassOutOfBoundsError* RogueOutOfBoundsError__init_object( RogueClassOutOfBoundsError* THIS );
ROGUE_EXPORT_C RogueString* RogueOutOfBoundsError__type_name( RogueClassOutOfBoundsError* THIS );
#line 69
ROGUE_EXPORT_C RogueClassOutOfBoundsError* RogueOutOfBoundsError__init__String( RogueClassOutOfBoundsError* THIS, RogueString* _auto_721_0 );
#line 34
ROGUE_EXPORT_C RogueClassOutOfBoundsError* RogueOutOfBoundsError___throw( RogueClassOutOfBoundsError* THIS );
#line 71
ROGUE_EXPORT_C RogueClassOutOfBoundsError* RogueOutOfBoundsError__init__Int32_Int32( RogueClassOutOfBoundsError* THIS, RogueInt32 index_0, RogueInt32 limit_1 );
#line 3 "../ScanTableBuilder.rogue"
ROGUE_EXPORT   RogueClassStateFlags RogueStateFlags__operatorOR__StateFlags( RogueClassStateFlags THIS, RogueClassStateFlags other_0 );
#line 120 "../../Rogue/Programs/RogueC/Libraries/Standard/System.rogue"
ROGUE_EXPORT_C RogueString* RogueSystemEnvironment__get__String( RogueClassSystemEnvironment THIS, RogueString* name_0 );
#line 3 "../Boss.rogue"
ROGUE_EXPORT_C RogueInt32 RogueTokenType__to_Int32( RogueClassTokenType THIS );

// INTERNAL PROTOTYPES
void Rogue_trace();

