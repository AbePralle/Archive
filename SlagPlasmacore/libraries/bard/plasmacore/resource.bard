#==============================================================================
# resource.bard
#
# $(PLASMACORE_VERSION) $(DATE)
#
# http://www.plasmaworks.com/plasmacore
#
# -----------------------------------------------------------------------------
#
# $(COPYRIGHT)
#
#   http://plasmaworks.com/plasmacore
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#   http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, 
# software distributed under the License is distributed on an 
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific 
# language governing permissions and limitations under the License.
#
#==============================================================================

#[include "introspection.bard"]

class DataFile : File
  # In console-based Bard you can use class File to read and write
  # data, but in Plasmacore you must use class DataFile since
  # not all gaming platforms support the standard filesystem
  # that File is geared towards.
  #
  # When loading a DataFile, if you've saved a DataFile of the
  # same name then it loads the saved data.  If there's no
  # saved version then the system attempts to load a file of
  # the same name that you placed in your "data" resource
  # directory.  In either case paths on DataFile objects are 
  # ignored.
  #
  # Examples:
  #   local DataFile save("slot1.sav") 
  #   if (save.exists)
  #     forEach (line in LineReader(save))
  #       local Scanner scanner(line)
  #       ...
  #     endForEach
  #   endIf
  #   ...
  #   local var writer = DataFile("slot1.sav").create_writer
  #   writer.println( hero.stats )
  #   ...
  #   writer.close

  PROPERTIES
    exists=-1    : Int32
    size         : Int32
    is_gamestate : Logical
    data         : String

  METHODS
    method init( filepath )

    private method assess( Logical save_data=false )
      if (&exists != -1 and (data? or not save_data)) return

      try
        data = ResourceManager.load_gamestate(filename)
        size = data.count
        exists = 1
        is_gamestate = true
      catch (FileError err)
        try
          data = ResourceManager.load_data_file(filepath)
          size = data.count
          exists = 1
          is_gamestate = false
        catch (FileError err2)
          exists = 0
        endTry
      endTry

      if (not save_data) data = null

    method exists.Logical
      # Returns whether or not this file already exists.
      assess
      if (&exists == 1) return true
      return false

    method size.Int32
      # Returns the byte size of this file.  Throws a FileError
      # if the file does not exist.
      assess
      if (&exists == 1) return data.count
      throw FileError()

    method create_reader.Reader<<Char>>
      # Returns a Reader<<Char>> that returns characters from this
      # data file.
      assess(true)
      if (&exists <= 0) throw FileError()
      local var result = data.create_reader
      data = null
      return result

    method create_writer.TextWriter
      # Returns a TextWriter that can write and print data to this file.
      return DataFileWriter( this )

    method create_appender.TextWriter
      # Like write() but appends data to the file, if it exists,
      # rather than overwriting it.
      assess(true)
      return DataFileWriter( this, data )

    method is_directory.Logical
      # Returns false - directory structures are not supported by DataFile.
      return false

    method absolute_path.String
      # Returns the absolute path denoted by this File object.
      return path

    method to_String.String
      # Returns the original filepath of this File object.
      return filepath

    method absolute_filepath.String
      # Same as 'filepath' for DataFile objects.
      return filepath

    method directory_listing.String[]
      # Throws an UnsupportedMethodError.
      throw UnsupportedMethodError()

    method delete
      # Deletes this DataFile as a saved gamestate.  The DataFile may still
      # exist as a resource in the data directory.
      ResourceManager.delete_gamestate(filename)
      exists = -1
      assess

    method to_bytes.Byte[]
      assess(true)
      if (&exists <= 0) throw FileError()
      return data.to_bytes

endClass

class DataFileWriter : StringBuilder, RequiresCleanup
  PROPERTIES
    file   : DataFile
    closed : Logical

  METHODS
    method init( file, String existing=null )
      if (existing?) prior.init(existing)
      else prior.init(80)
      file.data = null

    method close
      if (closed) return
      closed = true
      ResourceManager.save_gamestate( file.filename, to_String )
      file.data = null
      file.is_gamestate = true

    method clean_up
      close
endClass


singleton class ResourceManager
  METHODS
    method load_data_file( String filename ).String: native
      # Internal use.

    method load_gamestate( String filename ).String: native
      # Internal use.

    method save_gamestate( String filename, String data ): native
      # Internal use.

    method delete_gamestate( String filename ): native
      # Internal use.
endClass


