#=====================================================================
# js_data.bard
#
# JavaScript-style data structures and related classes.  Capable of
# loading and saving JSON data.
#
# 4.0.0 (2020.09.17)
#
# --------------------------------------------------------------------
#
# Copyright 2008-2011 Plasmaworks LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#   http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, 
# software distributed under the License is distributed on an 
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific 
# language governing permissions and limitations under the License.
#
#=====================================================================

#==============================================================================
# JSObject
#==============================================================================
class JSData( String data )
  # Manages a set of property values encoded as a String (akin
  # to JSON format).  You can add JSData to a JSObject
  # or JSList directly or you can parse() it into a
  # JSValue (typically a JSObject or JSList).
  CLASS_METHODS
    method parse_value( ParseReader reader ).JSValue
      while (reader.consume(' ')) noAction
      which (reader.peek)
        case '{': return JSObject(reader)
        case '[': return JSList(reader)
        case '"': return JSString(reader)
        case '0'..'9','-': return JSNumber(reader)
        case 't': reader.must_consume("true");  return JSTrue
        case 'f': reader.must_consume("false"); return JSFalse
        case 'n': reader.must_consume("null");  return JSNull
        case 'I': reader.must_consume("Infinity"); return JSNumber(infinity)
        case 'N': reader.must_consume("NaN");      return JSNumber(NaN)
        others:   
        throw Error( "Unrecognized JSData notation: Char($)" (Int32(reader.peek)) )
      endWhich

    method load( File file ).JSValue
      return parse_value( ParseReader(String.create_from(file.load)) )

  METHODS
    method parse.JSValue
      return parse_value( ParseReader(data) )

endClass

class JSValue : StringIDAccess, Readable<<JSValue>>
# Base class for anything that can be in a JSObject or
# JSList.
  METHODS
    method count.Int32
      return 0

    method keys.Reader<<String>>
      return String[](0).create_reader

    method create_reader.Reader<<JSValue>>
      return JSValue[](0).create_reader

    method is_String.Logical
      return false

    method is_number.Logical
      return false

    method as_String.String
      return to_String

    method as_Real64.Real64
      return to_String.to_Real64

    method as_Real32.Real32
      return Real32(as_Real64)

    method as_Int64.Int64
      return Int64(as_Real64)

    method as_Int32.Int64
      return Int32( as_Int64 )

    method as_Char.Char
      return Char( as_Int32 )

    method as_Byte.Byte
      return Byte( as_Int32 )

    method as_Logical.Logical
      return Logical( as_Int32 )

    method op+( JSValue other ).JSValue
      return JSString(as_String + other.as_String)

    method op+( String other ).JSValue
      return JSString(as_String + other)

    method op+( Real64 other ).JSValue
      return JSString(as_String + other)

    method op-( JSValue other ).JSValue
      return JSNumber( as_Real64 - other.as_Real64 )

    method op-( Real64 other ).JSValue
      return JSNumber( as_Real64 - other.as_Real64 )

    method op*( JSValue other ).JSValue
      return JSNumber( as_Real64 * other.as_Real64 )

    method op*( Real64 other ).JSValue
      return JSNumber( as_Real64 * other.as_Real64 )

    method op/( JSValue other ).JSValue
      return JSNumber( as_Real64 / other.as_Real64 )

    method op/( Real64 other ).JSValue
      return JSNumber( as_Real64 / other.as_Real64 )

    method to_String.String
      local StringBuilder buffer()
      to_String( buffer, false )
      return buffer.to_String

    method to_String( StringBuilder buffer, Logical strict_json ): abstract

    method to_json.String
      local StringBuilder buffer()
      to_String( buffer, true )
      return buffer.to_String

    method set( String id, JSValue value )
      throw UnsupportedMethodError()

    method set( String id, String value )
      throw UnsupportedMethodError()

    method set( String id, Real64 value )
      throw UnsupportedMethodError()

    method set( String id, Logical value )
      if (value) set( id, JSTrue )
      else       set( id, JSFalse )

    method set( String id, JSData value )
      throw UnsupportedMethodError()

    method set( Int32 index, JSValue value )
      throw UnsupportedMethodError()

    method set( Int32 index, JSData value )
      throw UnsupportedMethodError()

    method set( Int32 index, String value )
      throw UnsupportedMethodError()

    method set( Int32 index, Real64 value )
      throw UnsupportedMethodError()

    method add( JSValue value ).JSList
      throw UnsupportedMethodError()

    method add( String value ).JSList
      throw UnsupportedMethodError()

    method add( Real64 value ).JSList
      throw UnsupportedMethodError()

    method add( JSData value ).JSList
      throw UnsupportedMethodError()

    method get( String id ).JSValue
      return null

    method get( Int32 index ).JSValue
      return null

endClass

class JSObject : JSValue
  PROPERTIES
    _internal_property_map() : HashTable<<String,JSValue>>
    _internal_file           : File

  METHODS
    method init

    method init( _internal_file )
      if (_internal_file?) load( _internal_file )

    method init( String data )
      init( JSData(data) )

    method init( JSData data )
      init( ParseReader(data.data) )

    method init( ParseReader reader )
      reader.consume_ws
      reader.must_consume('{')

      reader.consume_ws
      if (not reader.consume('}'))
        local var first = true
        while (first or (not first and reader.consume(',')))
          first = false
        
          local String property_name
          reader.consume_ws
          if (reader.peek == '"')
            property_name = JSString(reader).value
          else
            # scan id
            local StringBuilder buffer()
            local var ch = reader.read
            if (not ch.is_letter and ch != '_') throw Error( "Letter or underscore expected." )
            buffer.print(ch)
            ch = reader.peek
            while (ch.is_alphanumeric or ch == '_')
              buffer.print(reader.read)
              ch = reader.peek
            endWhile
            property_name = buffer.to_String
          endIf

          reader.consume_ws
          if (reader.consume(':'))
            reader.consume_ws
            local var value = JSData.parse_value(reader)

            set( property_name, value )
          else
            set( property_name, JSTrue )
          endIf

          reader.consume_ws
        endWhile

        reader.must_consume('}')
      endIf

    method count.Int32
      return _internal_property_map.count

    method keys.Reader<<String>>
      return _internal_property_map.keys

    method create_reader.Reader<<JSValue>>
      return _internal_property_map.values

    method clear
      _internal_property_map.clear

    method load( _internal_file ).Logical
      _internal_property_map = HashTable<<String,JSValue>>()
      if (_internal_file? and _internal_file.exists)
        init( String(_internal_file.load) )
        return true
      else
        return false
      endIf

    method save
      save( _internal_file )

    method save( File save_file )
      if (save_file?) 
        _internal_file = save_file
        save_file.save( to_String )
      else
        throw Error( "No save file specified." )
      endIf

    method set( String id, JSValue value )
      if (value?)
        _internal_property_map[ id ] = value
      elseIf (_internal_property_map.contains(id))
        _internal_property_map.remove( id )
      endIf

    method set( String id, String value )
      if (value?)
        _internal_property_map[ id ] = JSString( value )
      elseIf (_internal_property_map.contains(id))
        _internal_property_map.remove( id )
      endIf

    method set( String id, Real64 value )
      _internal_property_map[ id ] = JSNumber( value )

    method set( String id, JSData value )
      if (value?)
        _internal_property_map[ id ] = value.parse
      elseIf (_internal_property_map.contains(id))
        _internal_property_map.remove( id )
      endIf

    method remove( String id ).JSObject
      set( id, null.(JSValue) )
      return this

    method get( String id ).JSValue
      if (_internal_property_map.contains(id))
        return _internal_property_map[id]
      else
        return null
      endIf

    method get( Int32 index ).JSValue
      return get(""+index)

    method as_Logical.Logical
      return count?

    method to_String( StringBuilder buffer, Logical strict_json )
      buffer.print( '{' )
      local var first = true
      forEach (key in _internal_property_map.keys)
        local var value = _internal_property_map[key]
        if (value isNot JSNull)
          if (first) first = false
          else       buffer.print(',')

          local var local_strict = strict_json
          if (not strict_json)
            contingent
              necessary (key[0]<='0' and key[0]>='9')
              forEach (ch in key)
                necessary ((ch>='A' and ch<='Z') or (ch>='a' and ch<='z') or (ch>='0' and ch<='9') or ch=='_')
              endForEach
            unsatisfied
              local_strict = true
            endContingent
          endIf

          if (local_strict)
            buffer.print('"')
            buffer.print(key)
            buffer.print('"')
            buffer.print(':')
            value.to_String( buffer, strict_json )
          else
            buffer.print(key)
            if (value.count? or value notInstanceOf JSObject)
              buffer.print(':')
              value.to_String( buffer, strict_json )
            endIf
          endIf
        endIf
      endForEach
      buffer.print( '}' )

endClass

class JSList : JSValue
  PROPERTIES
    _internal_property_list() : JSValue[]
    _internal_file           : File

  METHODS
    method init

    method init( _internal_file )
      load( _internal_file )

    method init( String data )
      init( JSData(data) )

    method init( JSData data )
      init( ParseReader(data.data) )

    method init( ParseReader reader )
      reader.consume_ws
      reader.must_consume('[')

      reader.consume_ws
      if (not reader.consume(']'))
        local var first = true
        while (first or (not first and reader.consume(',')))
          first = false

          reader.consume_ws
          local var value = JSData.parse_value(reader)
          add( value )

          reader.consume_ws
        endWhile

        reader.must_consume(']')
      endIf

    method get( Range<<Int32>> range ).JSList
      local JSList result()
      forEach (index in range) result.add( get(index) )
      return result

    method count.Int32
      return _internal_property_list.count

    method keys.Reader<<String>>
      local String[] result( count )
      forEach (n in 0..<count) result.add( ""+n )
      return result.create_reader

    method clear
      _internal_property_list.clear

    method load( _internal_file ).Logical
      if (_internal_file? and _internal_file.exists)
        clear()
        init( String(_internal_file.load) )
        return true
      else
        return false
      endIf

    method save
      save( _internal_file )

    method save( File save_file )
      if (save_file?) 
        _internal_file = save_file
        save_file.save( to_String )
      else
        throw Error( "No save file specified." )
      endIf

    method create_reader.Reader<<JSValue>>
      return _internal_property_list.create_reader

    method add( JSValue value ).JSList
      _internal_property_list.add( value )
      return this

    method add( String value ).JSList
      return add( JSString(value) )

    method add( Real64 value ).JSList
      return add( JSNumber(value) )

    method add( JSData value ).JSList
      return add( value.parse )

    method add( JSValue value, Int32 after_index ).JSList
      _internal_property_list.insert( value, after_index+1 )
      return this

    method add( String value, Int32 after_index ).JSList
      _internal_property_list.insert( JSString(value), after_index+1 )
      return this

    method add( Real64 value, Int32 after_index ).JSList
      _internal_property_list.insert( JSNumber(value), after_index+1 )
      return this

    method add( JSData value, Int32 after_index ).JSList
      _internal_property_list.insert( value.parse, after_index+1 )
      return this

    method insert( JSValue value, Int32 before_index=0 ).JSList
      _internal_property_list.insert( value, before_index )
      return this

    method insert( String value, Int32 before_index=0 ).JSList
      _internal_property_list.insert( JSString(value), before_index )
      return this

    method insert( Real64 value, Int32 before_index=0 ).JSList
      _internal_property_list.insert( JSNumber(value), before_index )
      return this

    method insert( JSData value, Int32 before_index=0 ).JSList
      _internal_property_list.insert( value.parse, before_index )
      return this

    method set( Int32 index, JSValue value )
      _internal_property_list.ensure_count( index + 1 )
      _internal_property_list[index] = value

    method set( Int32 index, JSData value )
      set( index, value.parse )

    method set( Int32 index, String value )
      set( index, JSString(value) )

    method set( Int32 index, Real64 value )
      set( index, JSNumber(value) )

    method remove( Int32 index ).JSList
      _internal_property_list.remove( index )
      return this

    method get( String id ).JSValue
      return get( id.to_Int32 )

    method get( Int32 index ).JSValue
      if (index < 0 or index >= _internal_property_list.count)
        return null
      else
        local var result = _internal_property_list[index]
        if (result is null) return JSNull
        return result
      endIf

    method as_Logical.Logical
      return count?

    method to_String( StringBuilder buffer, Logical strict_json )
      while (_internal_property_list.count? ...
        and _internal_property_list.last is JSNull)
        _internal_property_list.remove_last
      endWhile

      buffer.print( '[' )
      local var first = true
      forEach (value in _internal_property_list)
        if (first) first = false
        else       buffer.print(',')
        if (value is null) buffer.print( "null" )
        else value.to_String( buffer, strict_json )
      endForEach
      buffer.print( ']' )
endClass

singleton class JSNull : JSValue
  METHODS
    method to_String.String
      return "null"

    method as_Real64.Real64
      return 0.0

    method to_String( StringBuilder buffer, Logical strict_json )
      buffer.print( "null" )
endClass

singleton class JSTrue : JSValue
  METHODS
    method to_String.String
      return "true"

    method as_Real64.Real64
      return 1.0

    method as_Logical.Logical
      return true

    method to_String( StringBuilder buffer, Logical strict_json )
      buffer.print( "true" )
endClass

singleton class JSFalse : JSValue
  METHODS
    method to_String.String
      return "false"

    method as_Real64.Real64
      return 0.0

    method as_Logical.Logical
      return false

    method to_String( StringBuilder buffer, Logical strict_json )
      buffer.print( "false" )
endClass

class JSString( String value ) : JSValue
  METHODS
    method init( ParseReader reader )
      local StringBuilder buffer()

      reader.consume_ws
      reader.must_consume('"')
      while (not reader.consume('"'))
        local var ch = reader.read
        if (ch == '\\')
          which (reader.read)
            case '"':  buffer.print('"')
            case '\\': buffer.print('\\')
            case '/':  buffer.print('/')
            case 'b':  buffer.print(Char(8))
            case 'f':  buffer.print(Char(12))
            case 'n':  buffer.print(Char(10))
            case 'r':  buffer.print(Char(13))
            case 't':  buffer.print(Char(9))
            case 'u':
              local var n = 0
              forEach (1..4)
                n = n*16 + reader.read.to_value
              endForEach
              buffer.print( Char(n) )
          endWhich
        else
          buffer.print(ch)
        endIf
      endWhile

      value = buffer.to_String

    method is_String.Logical
      return true

    method as_String.String
      return value

    method to_String.String
      return value

    method as_Int64.Int64
      return value.to_Int64

    method to_String( StringBuilder buffer, Logical strict_json )
      buffer.print( '"' )
      forEach (ch in value)
        which (ch)
          case '"':  buffer.print("\\\"")
          case '\\': buffer.print("\\\\")
          case '/':  buffer.print("\\/")
          case   8:  buffer.print("\\b")
          case  12:  buffer.print("\\f")
          case  10:  buffer.print("\\n")
          case  13:  buffer.print("\\r")
          case   9:  buffer.print("\\t")
          others:
          if (ch >= 32 and ch <= 126) buffer.print(ch)
          else buffer.print( "\\u$(04)" (Int32(ch).to_String(16)) )
        endWhich
      endForEach
      buffer.print( '"' )
endClass

class JSNumber( Real64 value ) : JSValue
  METHODS
    method init( ParseReader reader )
      local StringBuilder buffer()

      reader.consume_ws
      if (reader.consume('-')) buffer.print('-')
      while (reader.peek.is_digit(10)) buffer.print(reader.read)

      if (reader.consume('.'))
        buffer.print('.')
        while (reader.peek.is_digit(10)) buffer.print(reader.read)
      endIf

      if (reader.consume('e') or reader.consume('E'))
        buffer.print('e')
        if (reader.consume('-')) buffer.print('-')
        elseIf (reader.consume('+')) buffer.print('+')
        while (reader.peek.is_digit(10)) buffer.print(reader.read)
      endIf

      value = buffer.to_String.to_Real64

    method is_number.Logical
      return true

    method as_String.String
      return to_String

    method as_Real64.Real64
      return value

    method as_Int64.Int64
      return Int64(value)

    method op+( JSValue other ).JSValue
      if (other.is_String)
        return JSString( to_String + other.as_String )
      else
        return JSNumber( value + other.as_Real64 )
      endIf

    method op+( Real64 other ).JSValue
      return JSNumber( value + other )

    method to_String( StringBuilder buffer, Logical strict_json )
      if (value == infinity)
        buffer.print( "infinity" )
      elseIf (value == -infinity)
        buffer.print( "-infinity" )
      elseIf (value.is_NaN)
        buffer.print( "NaN" )
      elseIf (value == Int64(value))
        buffer.print( ""+Int64(value) )
      else
        local String st = "$(.8)" (value)
        forEach (1..7)
          if (st.last == '0') st = st.excluding_rightmost(1)
          else escapeForEach
        endForEach
        buffer.print( st )
      endIf


endClass
