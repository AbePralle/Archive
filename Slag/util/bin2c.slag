class bin2c
  PROPERTIES
    make_h : Logical

  METHODS
    method init:
      if (not command_line_args.count?)
        println( "Usage: bin2c [-h] filename1 [...]" )
        return
      endIf

      forEach (filename in command_line_args) 
        if (filename == "-h") make_h = true
      endForEach

      forEach (filename in command_line_args) 
        if (filename != "-h") process(filename)
      endForEach


    method process( String filename ):
      local Int32 dot = filename.last_index_of('.')
      local String base_name

      # Using <1 instead of != -1 on purpose!
      if (dot < 1) base_name = filename
      else base_name = filename.substring(0,dot-1)

      local var infile = File(filename).create_reader
      local Int32 count = infile.available

      local PrintWriter outfile

      if (make_h)
        println( "  $.h" (base_name) )
        outfile = File( base_name + ".h" ).create_writer
        outfile.println( "#ifndef $_H" (base_name.to_uppercase) )
        outfile.println( "#define $_H" (base_name.to_uppercase) )
        outfile.println
        outfile.println( "//====================================================================" )
        outfile.println( "// $.h" (base_name) )
        outfile.println( "//" )
        outfile.println( "// Auto-generated by bin2c" )
        outfile.println( "//====================================================================" )
        outfile.println
        outfile.println( "extern unsigned char embedded_$[];" (base_name) )
        outfile.println( "extern int embedded_$_size;" (base_name) )
        outfile.println
        outfile.println( "#endif //$_H" (base_name.to_uppercase) )
        outfile.close
      endIf

      println( "  $.cpp" (base_name) )
      outfile = File( base_name + ".cpp" ).create_writer
      outfile.println( "//====================================================================" )
      outfile.println( "// $.cpp" (base_name) )
      outfile.println( "//" )
      outfile.println( "// Auto-generated by bin2c" )
      outfile.println( "//====================================================================" )
      outfile.println
      outfile.println( "int embedded_$_size = $;" (base_name,count) )
      outfile.println
      outfile.println( "unsigned char embedded_$[] =" (base_name) )
      outfile.println( "{" )
      outfile.print(   "  " )
      local Int32 col = 0
      forEach (ch in infile)
        if (ch >= 32 and ch <= 126 and ch != '\'' and ch != '\\') outfile.print( "'$'" (ch) )
        else outfile.print( "$(3)" (Int32(ch)) )
        col++;
        count--
        if (count > 0) outfile.print(',')
        if (col == 16)
          outfile.println
          if (count > 0) outfile.print( "  " )
          col = 0
        endIf
      endForEach
      if (col > 0) outfile.println
      outfile.println( "};" )
      outfile.close

endClass
