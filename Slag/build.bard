class Main : GoGo
  PROPERTIES
    bin = "bin/" + System.os      : String
    bard_cpp_files    : FileSet
    bardic_cpp_files   : FileSet
    bard_files("libraries/bard/bardic","*.bard") : FileSet
    bard_exe, bardic_exe, gogo_exe, bard_build, bardic_build, gogo_build : File

  METHODS
    method build( String cmd ):
      if (cmd == "rebuild")
        println( "Type ./gogo rebuild to rebuild the Bard executables." )
        return
      endIf

      set_up
      if (cmd == "") return
      if (cmd == "menu" or cmd == "help") cmd = ""

      cmd = menu( cmd, null, {"all","bin","libraries","bard","bardic","gogo","xclean","etc","etc-vm",
        "bardictest","version","plasmacore install-path"} )
      if (cmd is null) return

      which (cmd)
        case "libraries","libs": return  # already copied libraries
        case "all","":    all
        case "bin":      make_bin_dist
        case "src":      make_src_dist
        case "bard":      compile_bard
        case "bardic":     compile_bardic
        case "gogo":      compile_gogo
        case "etc":       compile_etc(true)
        case "etc-vm":    compile_etc_using_vm
        case "bardictest": bardictest
        case "clean":     make_clean
        case "xclean":    make_xclean
        case "download":  download( "plasmaworks.com/images/deathride/deathride5_thumbnail.png" )
        case "version":
          if (System.os == "mac")
            execute( "mvim libraries/native/bard/bard_version.h libraries/bard/bardic/bardic.bard project.properties" )
            touch( FileSet("libraries/bard") )
            touch( FileSet("libraries/bard/bardic","*.bard") )
            touch( FileSet("libraries/native/bard") )
          elseIf (System.os == "windows")
            execute( "gvim libraries/native/bard/bard_version.h libraries/bard/bardic/bardic.bard project.properties" )
            touch( FileSet("libraries/bard") )
            touch( FileSet("libraries/bard/bardic","*.bard") )
            touch( FileSet("libraries/native/bard") )
          elseIf (System.os == "unix")
            execute( "vim libraries/native/bard/bard_version.h libraries/bard/bardic/bardic.bard project.properties" )
            touch( FileSet("libraries/bard") )
            touch( FileSet("libraries/bard/bardic","*.bard") )
            touch( FileSet("libraries/native/bard") )
          endIf
        case "plasmacore install-path":
          throw Error( //You must type "gogo plasmacore install-path", e.g. "gogo plasmacore ../game".// )
        case "plasmacore":
          if (command_line_args.count != 2)
            throw Error( //You must type "gogo plasmacore install-path", e.g. "gogo plasmacore ../game".// )
          endIf
          install_plasmacore( command_line_args[1] )

        others: throw Error( "Unsupported command: " + cmd )
      endWhich

    method set_up:
      bard_cpp_files = FileSet(".",null)
      bard_cpp_files.include("src/bard.cpp")
      bard_cpp_files.include("src/gogo.cpp")
      bard_cpp_files.include("libraries/native/bard/*")
      bard_cpp_files.exclude("*/bard_xc.*")

      bardic_cpp_files = FileSet(".",null)
      bardic_cpp_files.include("src/bardic.cpp")
      bardic_cpp_files.include("libraries/native/bard/*")
      bardic_cpp_files.exclude("*/bard_vm.*")

      which (System.os)
        case "windows":
          bard_exe = File("bin\\windows\\bard.exe")
          bardic_exe = File("bin\\windows\\bardic.exe")
          gogo_exe  = File("bin\\windows\\gogo.exe")
          bard_build  = File("platforms\\windows\\Release\\bard.exe")
          bardic_build = File("platforms\\windows\\Release\\bardic.exe")
          gogo_build  = File("platforms\\windows\\Release\\gogo.exe")
          copy( File("libraries/bard/gogo.bard"), Directory("bin/windows/libraries"),
              Copy.newer_only | Copy.insert_properties )

        case "mac":
          bard_exe  = File("bin/" + System.os + "/bard")
          bardic_exe = File("bin/" + System.os + "/bardic")
          gogo_exe  = File("bin/" + System.os + "/gogo")
          bard_build  = File("platforms/" + System.os + "/build/Release/bard")
          bardic_build = File("platforms/" + System.os + "/build/Release/bardic")
          gogo_build  = File("platforms/" + System.os + "/build/Release/gogo")
          copy( File("libraries/bard/gogo.bard"), Directory("bin/" + System.os + "/libraries"),
              Copy.newer_only | Copy.insert_properties )

        others:
          bard_exe  = File("bin/" + System.os + "/bard")
          bardic_exe = File("bin/" + System.os + "/bardic")
          gogo_exe  = File("bin/" + System.os + "/gogo")
          bard_build  = File("bin/" + System.os + "/bard")
          bardic_build = File("bin/" + System.os + "/bardic")
          gogo_build  = File("bin/" + System.os + "/gogo")
          copy( File("libraries/bard/gogo.bard"), Directory("bin/" + System.os + "/libraries"),
              Copy.newer_only | Copy.insert_properties )
      endWhich

      copy( FileSet("libraries/bard/standard"), Directory(bin+"/libraries/standard"), 
          Copy.insert_properties )
      copy( FileSet("libraries/bard","*.bard",false), Directory(bin+"/libraries"), 
          Copy.insert_properties )

      which (System.os)
        case "windows":
          if (where("bard.exe") is null)
            local var path = File("bin/windows").absolute_path
            println( "*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=ATTENTION=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*" )
            println( //You need to add the Bard executables to your system path.  To do this, click Start, right-click "Computer", and pick "Properties".  Click "Advanced system settings" (or similar) and then click "Environment Variables".  Find "Path" and edit it.  Insert the following://.word_wrap(70) )
            println
            println( "  $;" (path) )
            println
            println(//Your full path should then look like this://)
            println
            println( "  $;$" (path,System["Path"]) )
            println
            println(//Click "OK" and then close and re-open this CMD window so that the changes take effect.//.word_wrap(70) )
            println( "*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*" )
            println
            System.exit(1)
          endIf
      endWhich

    method all:
      compile_bard
      compile_bardic
      compile_gogo

    method compile_bard:
      if (bard_cpp_files.newer_than(bard_build.filepath))
        println( "> Compile 'bard'" )
        which (System.os)
          case "mac":
            execute( "xcodebuild -target bard", "platforms/mac" )

          case "windows":
            println( //Load Visual Studio 2010 and open the platforms\\windows solution.  Set the build mode to Release and then right-click..build "bard" and "gogo".//.word_wrap(70) )
            println
            input_String( "Press [ENTER] when the build has finished." )

          case "linux":
            execute( "make bard", "platforms/linux" )

          others:
            println( "TODO: compile_bard for $" (System.os) )
        endWhich
        touch( bard_build )
      endIf

      if (copy( bard_build, Directory(bin) ))
        if (System.os != "windows") chmod( bin + "/bard", "a+rx" )
      endIf

    method compile_gogo:
      if (bard_cpp_files.newer_than(gogo_build.filepath))
        println( "> Compile 'gogo'" )
        which (System.os)
          case "mac":
            execute( "xcodebuild -target gogo", "platforms/mac" )

          case "linux":
            execute( "make gogo", "platforms/linux" )

          case "windows":
            println( //Load Visual Studio 2010 and open the platforms\\windows solution.  Set the build mode to Release and then right-click..build "bard", and "gogo".//.word_wrap(70) )
            println
            input_String( "Press [ENTER] when the build has finished." )

          others:
            println( "TODO: compile_bard for $" (System.os) )
        endWhich

        touch( gogo_build )

        gogo_exe.delete
        println("**********************************************************************")
        if (System.os == "windows") println( "Run gogo again to complete gogo update." )
        else                        println( "Run ./gogo again to complete gogo update." )
        println("**********************************************************************")

      endIf

    method compile_bardic:
      compile_bard
      compile_etc

      if (File("libraries/bard/bardic/bardic.etc").newer_than("build/bardic_xc.cpp"))
        println( "> Cross-compiling bardic.etc into C++" )
        local var cmd = bard_exe.filepath
        if (System.os == "windows") cmd = "cmd /C " + cmd
        execute(//$ libraries/bard/bardic/bardic.etc -src_path "libraries/bard/bardic;libraries/bard/standard" bardic.bard //
          // -cpp -dest_path build// (cmd) )
      endIf

      if (File("build/bardic_xc.cpp").newer_than(bardic_build.filepath) ...
          or bardic_cpp_files.newer_than(bardic_build.filepath))
        println( "> Compile 'bardic'" )
        which (System.os)
          case "mac":
            execute( "xcodebuild -target bardic", "platforms/mac" )

          case "linux":
            execute( "make bardic", "platforms/linux" )

          case "windows":
            println( //Load Visual Studio 2010 and open the platforms\\windowplatforms\\windows solution.  Set the build mode to Release and then right-click..build "bardic".//.word_wrap(70) )
            println
            input_String( "Press [ENTER] when the build has finished." )
        endWhich

        touch( bardic_build )
      endIf

      if (copy(bardic_build, Directory(bin)))
        if (System.os != "windows") chmod( "bin/" + System.os + "/bard", "a+rx" )
      endIf

    method compile_etc_using_bardic.Logical:
      println( "> Recompiling bardic.etc" )
      which (System.os)
        case "windows":
          execute(//cmd /C bardic bardic.bard -src_path "libraries/bard/bardic;libraries/bard/standard" -dest_path "libraries/bard/bardic"//)

        others:
          execute(//bardic bardic.bard -src_path "libraries/bard/bardic;libraries/bard/standard" -dest_path "libraries/bard/bardic"//)
      endWhich
      return true

    method compile_etc_using_vm:
      println( "> Recompiling bardic.etc using virtual machine." )
      which (System.os)
        case "windows":
          execute(//cmd /C bard.exe libraries/bard/bardic/bardic.etc bardic.bard -src_path "libraries/bard/bardic;libraries/bard/standard" -dest_path libraries/bard/bardic// )
          
        others:
          execute(//bard libraries/bard/bardic/bardic.etc bardic.bard -src_path "libraries/bard/bardic;libraries/bard/standard" -dest_path libraries/bard/bardic// )
      endWhich

    method compile_etc( Logical forced=false ):
      if (forced or bard_files.newer_than("libraries/bard/bardic/bardic.etc"))
        if (bardic_exe.exists)
          compile_etc_using_bardic
        else
          compile_etc_using_vm
        endIf
      endIf

    method bardictest:
      if (FileSet("libraries/bard/bardic","*.bard").newer_than("libraries/bard/bardic/bardic.etc"))
        compile_etc
      endIf
      execute("bard libraries/bard/bardic/bardic.etc test.bard")
      execute("bard test")

    method make_clean:
      delete( "platforms/" + System.os + "/build" )
      delete( "build" )

    method make_xclean:
      delete( "bin" )

    method make_bin_dist:
      mkdir("dist")

      local var zip_filename = "dist/bard-$-$-bin.zip" ...
        (project_properties["BARD_VERSION"],System.os)
      delete( zip_filename )
      zip( FileSet("bin/$"(System.os)), zip_filename, "bard/bin" )

    method make_src_dist:
      mkdir("dist")

      local var dest_dir = "dist/bard-$-src" (project_properties["BARD_VERSION"])
      local var zip_filename = dest_dir + ".zip"
      delete( zip_filename )
      delete( dest_dir )
      mkdir( dest_dir )
      execute( "hg archive " + dest_dir )
      zip( FileSet(dest_dir), zip_filename, "bard/" )
      delete( dest_dir )

    method install_plasmacore( String dest )
      println( "> Install new Plasmacore project" )
      dest = File(dest).with_forward_slashes.filepath

      local var manifest = download("http://plasmaworks.com/files/plasmacore/archive/manifest.txt")
      local String url = null
      forEach (line in LineReader(String.create_from(manifest)))
        if (line.begins_with("url:"))
          url = line.after_first(' ').trim
          escapeForEach
        endIf
      endForEach

      mkdir( "build" )
      File("build/temp.zip").save( download(url) )

      if (dest.ends_with('/')) dest.=excluding_rightmost(1)
      mkdir( dest )
      dest += "/"
      forEach (entry in ZipArchive("build/temp.zip"))
        local var filename = entry.filename.after_first("new_project/")
        mkdir( File(dest+filename).path )
        File(dest+filename).save( entry.decompress )
      endForEach
      chmod( dest+"gogo", "a+rx" )
      delete( "build/temp.zip" )

      println( "A new Plasmacore project is installed at " + dest.excluding_rightmost(1) )

endClass

