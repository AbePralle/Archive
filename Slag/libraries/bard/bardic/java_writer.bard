#=====================================================================
# java_writer.bard
#
# History:
#   2011.03.17 / Abe Pralle - Retrofitting C# generator for Java.
#=====================================================================

singleton class JavaWriter
  PROPERTIES
    out         : TextWriter
    indent      : Int32
    col=1       : Int32
    lines       : Int32
    num_files   : Int32

    output_filename, base_name, base_path : String
    
    this_method : MethodInfo

  METHODS
    method write( output_filename )
      output_filename .= before_first(".java")
      base_path = File(output_filename).path
      base_name = output_filename.after_last('/').after_last('\\')

      # Assign default cross-compilation names
      assign_cross_compile_names

      if (not BardCompiler.quiet) Global.println( "  Writing $/*.java" (base_path) )
      open_file( "BardGlobals" )

      println( "public class BardGlobals" )
      println( "{" )
      indent += 2;
      print_globals
      indent -= 2;
      println( "}" )
      println

      print_types

      if (out?) out.close; out = null

    method do_indent
      while (col <= indent) out.print(' '); col++

    method print( Char ch )
      do_indent
      out.print( ch )
      col++

    method print( String st )
      do_indent
      forEach (ch in st) print(ch)

    method print( Int32 n )
      do_indent
      out.print( n )
      col += (""+n).count

    method print( Real64 n )
      do_indent
      out.print( n )
      col += (""+n).count

    method print( Logical b )
      do_indent
      out.print( b )
      if (b) col += 4
      else   col += 5

    method println( String st )
      print( st )
      println

    method println( Int32 n )
      print( n )
      println
    
    method println( Char ch )
      print( ch )
      println

    method println
      out.println
      col = 1
      lines++

    method open_file( String filename )
      if (out?) out.close

      #if (not BardCompiler.quiet) Global.println( "  Writing $.java" (filename) )
      out = File("$/$.java" (base_path,filename)).create_writer

      print( "//" )
      forEach (1..77) print('=')
      println
      println( "//  $.java" (filename) )
      println( "//  Generated by bardic $" (Date()) )
      print( "//" )
      forEach (1..77) print('=')
      println
      if (BardCompiler.java_package.count?)
        println( "package $;" (BardCompiler.java_package) )
      endIf
      println

    method assign_cross_compile_names
      forEach (type in TypeManager.type_list)
        type.x_name
        if (type.name == "GenericArray") type.&x_name = "Array"
      endForEach

      forEach (m in TypeManager.method_list)
        m.&x_name = m.name.x_compatible
      endForEach

      TypeManager["Real64"].x_name = "double";
      TypeManager["Real32"].x_name = "float";
      TypeManager["Int64"].x_name = "long";
      TypeManager["Int32"].x_name = "int";
      TypeManager["Char"].x_name = "char";
      TypeManager["Byte"].x_name = "byte";
      TypeManager["Logical"].x_name = "boolean";
      TypeManager["NativeData"].x_name = "NativeData";

      forEach (type in TypeManager.type_list)
        fix_array_type(type)
      endForEach

    method fix_array_type( TypeInfo type )
      if (type.is_array)
        fix_array_type(type.element_type)
        type.x_name = type.element_type.x_name + "[]";
      endIf

    method print_globals
      forEach (type in TypeManager.type_list)
        if (type.is_singleton and not type.is_managed)
          println( "static public $ singleton_$;" (type.x_name, type.x_name) )
        endIf
      endForEach

      local var main_class = TypeManager.main_class

      println( "static public $ main_object;" (main_class.x_name) )
      println

      println( "static public void configure()" )
      println( "{" )
      indent += 2

      forEach (type in TypeManager.type_list)
        if (type.is_singleton and not type.is_managed and type isNot main_class)
          println( "singleton_$ = new $()(Bard.CallInit.FALSE);" (type.x_name,type.x_name) )
        endIf
      endForEach
      println
      println( "Bard.configure();" );
      println
      forEach (type in TypeManager.type_list)
        if (type.is_singleton and not type.is_managed and type isNot main_class)
          println( "singleton_$.init_object();" (type.x_name) )
        endIf
      endForEach
      println
      forEach (type in TypeManager.type_list)
        if (type.is_singleton and not type.is_managed and type isNot main_class)
          if (type.methods_by_signature.contains("init()"))
            println( "singleton_$.init();" (type.x_name) )
          endIf
        endIf
      endForEach

      indent -= 2
      println( "}" )
      println

      println( "static public void launch()" )
      println( "{" )
      indent += 2

      if (main_class.is_singleton)
        if (main_class.is_managed)
          println( "singleton_$.property_singleton_instance = new $()(Bard.CallInit.FALSE);"... 
              (main_class.manager_class.x_name,main_class.x_name) )
          println( "main_object = singleton_$.property_singleton_instance;"...
              (main_class.manager_class.x_name) )
        else
          println( "singleton_$ = new $()(Bard.CallInit.FALSE);" (main_class.x_name,main_class.x_name) )
          println( "main_object = singleton_$;" (main_class.x_name) )
        endIf
      else
        # Main class is not a singleton, but let's still save the init() for later.
        println( "main_object = new $()(Bard.CallInit.FALSE);" (TypeManager.main_class.x_name) )
      endIf
      println( "main_object.init_object();" );

      indent -= 2
      println( "}" )
      println

    method print_types
      local var type_string = TypeManager["String"]

      forEach (type in TypeManager.type_list)
        if (type is TypeInfo.type_null) nextIteration
        if (type.is_array or type.is_primitive) nextIteration
        if (type.name == "GenericArray") nextIteration
        if (type.name == "Exception") nextIteration
        if (type.name == "NativeData") nextIteration

        open_file( type.x_name )

        if (type.is_class)
          forEach (m in type.methods)
            if (m.is_abstract) print("abstract "); escapeForEach
          endForEach
          print( "public class $" (type.x_name) )
          if (type isNot TypeManager.type_object and not type.is_compound)
            print( " extends " + type.base_types[0].x_name )
          endIf
        elseIf (type.is_compound)
          print( "public class $" (type.x_name) )
        elseIf (type.is_aspect)
          print( "public interface $" (type.x_name) )
        else
          throw Error("Unknown kind of type.")
        endIf

        if (type.base_types.count?)
          local var first = true
          forEach (a in type.base_types)
            if (a.is_aspect)
              if (first)
                first = false
                if (type.is_aspect) print(" extends ")
                else print(" implements ")
              else 
                print(", ")
              endIf
              print(a.x_name)
            endIf
          endForEach
        endIf

        println

        println( "{" )
        indent += 2

        if (type is type_string)
          # Print native implementation
          println( "public String data;" )
          println( "public int    hash_code;" )
          println
          println( "public ClassString( String data )" )
          println( "{" )
          println( "  super( Bard.CallInit.FALSE );" )
          println( "  this.data = data;" )
          println( "  int code = 0;" )
          println( "  for (int i=0; i<data.length(); ++i)" )
          println( "  {" )
          println( "    code = (code<<7) | ((code>>(16-7)) & ((1<<7)-1));" )
          println( "    code += (int) data.charAt(i);" )
          println( "  }" )
          println( "  hash_code = code;" )
          println( "}" )
          println
        endIf

        if (not type.is_aspect)
          local var new_property = false
          forEach (p in type.properties)
            if (type.base_class is null or not type.base_class.properties_by_name.contains(p.name))
              print( "public $ $" (p.type.x_name,p.x_name) )
              if (p.type.is_compound and not type.is_compound)
                print( " = new $()()" (p.type.x_name) )
              endIf
              println( ';' )
              new_property = true
            endIf
          endForEach
          if (new_property) println
        endIf

        if (type.is_compound)
          # Compound constructors
          println( "static public $[] create_array( int count )" (type.x_name) )
          println( "{" )
          println( "  $[] result = new $[count];" (type.x_name,type.x_name) )
          println( "  for (int i=0; i<count; ++i)" )
          println( "  {" )
          println( "    result[i] = new $()();" (type.x_name) );
          println( "  }" )
          println( "  return result;" )
          println( "}" )
          println

          println( "public $()()" (type.x_name) )
          println('{')
          forEach (p in type.properties)
            if (p.type.is_compound)
              println( "  this.$ = new $()();" (p.x_name,p.type.x_name) )
            endIf
          endForEach
          println('}')
          println

          print( "public $()(" (type.x_name) )
          local var first=true
          forEach (p in type.properties)
            if (first) first = false
            else print(',')
            print( " $ $" (p.type.x_name,p.x_name) )
          endForEach
          println(" )")
          println('{')
          forEach (p in type.properties)
            println( "  this.$ = $;" (p.x_name,p.x_name) )
          endForEach
          println('}')
          println

          # equals() method
          println( "public boolean equals( $ other )" (type.x_name) )
          println( '{' )
          forEach (p in type.properties)
            if (p.type.is_compound) 
              println( "  if (!($.equals(other.$))) return false;" (p.x_name,p.x_name) )
            else
              println( "  if ($ != other.$) return false;" (p.x_name,p.x_name) )
            endIf
          endForEach
          println( "  return true;" )
          println( '}' )
          println

        else

          if (type.is_aspect)
            # Aspect method list.
            forEach (m in type.methods)
              if (m.type_context is type) 
                contingent
                  forEach (base_aspect in type.base_types)
                    necessary (not base_aspect.methods_by_signature.contains(m.signature))
                  endForEach
                satisfied
                  print_prototype(m,true)
                endContingent
              endIf
            endForEach
          else
            # Class Constructors
            local var found_overrides = false
            local var found_inherited = false
            local var found_default = false
            forEach (m in type.methods)
              if (m.name=="init")
                if (m.type_context is type)
                  if (m.parameters.count == 0) found_default = true
                  found_overrides = true
                  print_constructor( type, m )
                else
                  found_inherited = true
                endIf
              endIf
            endForEach

            if (not found_overrides)
              if (found_inherited)
                # Print inherited constructors
                forEach (m in type.methods)
                  if (m.name=="init")
                    if (m.parameters.count == 0) found_default = true
                    print_constructor( type, m )
                  endIf
                endForEach
              endIf
            endIf

            # Every class needs a special constructor that
            # can be used to skip calls to init_object() and init()
            # so that those calls can be performed separately and 
            # with their own call chain.
            if (type is TypeManager.type_object or type is TypeManager.type_exception)
              println( "public $()( Bard.CallInit call_init )" (type.x_name) )
              println( "{" )
              println( "  if (call_init == Bard.CallInit.TRUE) init_object();" )
              println( "}" )
            else
              println( "public $()( Bard.CallInit call_init )" (type.x_name) )
              println( "{" )
              println( "  super( Bard.CallInit.FALSE );" )
              println( "  if (call_init == Bard.CallInit.TRUE) init_object();" )
              println( "}" )
            endIf
            println

            # type_name() method
            #{
            if (type is TypeManager.type_object) print("public virtual ")
            else                                 print("public override ")
            println( //ClassString type_name() { return Bard.str("$"); }// ...
                     (type.name) )
            println
            }#

            # regular methods
            forEach (m in type.methods)
              if (m.type_context is type) print_method(m)
            endForEach
          endIf
        endIf

        println
        indent -= 2
        println( "}" )
      endForEach

    method print_constructor( TypeInfo type, MethodInfo m )
      print( "public $()(" (type.x_name) )
      local var first=true
      forEach (p in m.parameters)
        if (first) first = false
        else print(',')
        print( "$ $" (p.type.x_name,p.x_name) )
      endForEach
      print(")")
      println
      println('{')

      if (type isNot TypeManager.type_object and type isNot TypeManager.type_exception)
        print( "  super( Bard.CallInit.FALSE );" )
      endIf

      println( "  $_object();" (m.x_name) )

      print( "  $()(" (m.x_name) )
      first=true
      forEach (p in m.parameters)
        if (first) first = false
        else print(',')
        print( "$" (p.x_name) )
      endForEach
      println(");")
      println('}')
      println

    method print_prototype( MethodInfo m, Logical semicolon=false )
      this_method = m
      #referenced_end_method = false

      if (not semicolon) print( "public " )

      if (m.return_type?) print( "$ " (m.return_type.x_name) )
      else                print( "void " )
      print( m.x_name + "(" )

      local var first = true
      forEach (p in m.parameters)
        if (first) first = false
        else       print(',')
        print( "$ $" (p.type.x_name,p.x_name) )
      endForEach

      if (semicolon)
        println( ");" )
      else
        print( ") { " )
        which (m.return_type)
          case null: println( "}" )
          case TypeManager.type_real64:  println( "return 0.0; }" )
          case TypeManager.type_real32:  println( "return 0.0f; }" )
          case TypeManager.type_int64:   println( "return 0L; }" )
          case TypeManager.type_int32:   println( "return 0; }" )
          case TypeManager.type_char:    println( "return (char) 0; }" )
          case TypeManager.type_byte:    println( "return (byte) 0; }" )
          case TypeManager.type_logical: println( "return 0; }" )
          others:
            println( "return null; }" )
        endWhich
      endIf

    method print_method( MethodInfo m )
      if (m.type_context.is_aspect) return
      if (m.type_context.name == "GenericArray") return

      this_method = m

      if (m.is_abstract)
        print( "abstract public " )
      else
        print( "public " )
      endIf

      if (m.return_type?) print( "$ " (m.return_type.x_name) )
      else                print( "void " )
      print( m.x_name + "(" )

      local var first = true
      forEach (p in m.parameters)
        if (first) first = false
        else       print(',')
        print( "$ $" (p.type.x_name,p.x_name) )
      endForEach

      print( ")" )

      if (m.is_abstract) println(";"); println; return
      else println

      println( "{" )

      indent += 2

      if (m.is_native)
        if (m.return_type?) print("return ")

        local String[] args()
        forEach (p in m.parameters) args.add(p.x_name)
        print( native_call( m.full_signature, m.x_name, "this", args) )
        println(";");
        indent -= 2
        println( "}" )
        println
        return
      endIf

      # local vars
      local var any_locals = false
      forEach (v in m.local_vars.from(m.parameters.count))
        if (not v.is_catch_var)
          any_locals = true
          println( "$ $;" (v.type.x_name,v.x_name) )
        endIf
      endForEach
      if (any_locals) println

      m.body.to_java

      indent -= 2

      println( "}" )
      println

    method write_end_id( CmdStructure cmd )
      if (cmd.referenced)
        println( "end_$:" (cmd.id) )
      endIf

    method native_call( String full_sig, String method_name, String context, CmdList args ).String
      local String[] string_args()
      forEach (arg in args) string_args.add(arg.to_java)
      return native_call( full_sig, method_name, context, string_args )

    method native_call( String full_sig, String method_name, String context, String[] args ).String
      which (full_sig[0])
        case 'G':
          which (full_sig)
            case "Global::time_ms().Int64":
              return "System.currentTimeMillis()"

            case "Global::sleep(Int32)":
              return "try{Thread.sleep($);}catch(InterruptedException err){}" (args[0])
          endWhich

        case 'M':
          which (full_sig)
            case "Math::abs(Int64).Int64":
              return "Math.abs($)" (args[0])

            case "Math::abs(Int32).Int32":
              return "Math.abs($)" (args[0])

            case "Math::abs(Real64).Real64":
              return "Math.abs($)" (args[0])

            case "Math::floor(Real64).Real64":
              return "Math.floor($)" (args[0])

            case "Math::sqrt(Real64).Real64":
              return "Math.sqrt($)" (args[0])

            case "Math::sin(Radians).Real64":
              return "Math.sin(($).property_value)" (args[0])

            case "Math::cos(Radians).Real64":
              return "Math.cos(($).property_value)" (args[0])

            case "Math::tan(Radians).Real64":
              return "Math.tan(($).property_value)" (args[0])

            case "Math::asin(Real64).Radians":
              return "new CompoundRadians(Math.asin($))" (args[0])

            case "Math::acos(Real64).Radians":
              return "new CompoundRadians(Math.acos($))" (args[0])

            case "Math::atan(Real64).Radians":
              return "new CompoundRadians(Math.atan($))" (args[0])

            case "Math::atan2(Real64,Real64).Radians":
              return "new CompoundRadians(Math.atan2($,$))" (args[0],args[1])
          endWhich

        case 'S':
          which (full_sig)
            case "String::count().Int32":
              return "$.data.length()" (context)

            case "String::hash_code().Int32":
              return "$.hash_code" (context)

            case "String::get(Int32).Char":
              return "$.data.charAt($)" (context,args[0])

            case "String::op+(String).String":
              return "(new ClassString($.data + $.data))" (context,args[0])

            case "String::op+(Char).String":
              return "(new ClassString($.data + $))" (context,args[0])

            case "System::force_garbage_collection()":
              return "System.gc()"
          endWhich

        others:
          which (full_sig)
          endWhich

      endWhich

      local StringBuilder buffer()
      if (full_sig.begins_with("NativeData::"))
        buffer.print( "$.$()()" (context, method_name) )
      else
        buffer.print( "Native$.$" (full_sig.before_first("::").after_first("Class"),method_name) )
        buffer.print( "($" (context) )
        forEach (arg in args) buffer.print( ",$" (arg) )
        buffer.print( ")" )
      endIf
      return buffer.to_String

endClass

augment Cmd
    method to_java.String
      throw Error( "to_java() undefined for type " + type_name )

    method statement_to_java.String
      return to_java
endAugment

augment CmdStatementList
    method to_java.String
      forEach (statement in statements) 
        local var st = statement.statement_to_java
        if (st?) JavaWriter.print(st); JavaWriter.println(';')
      endForEach
      return null
endAugment

augment CmdList
    method to_java.String
      local StringBuilder buffer()
      local var first = true
      forEach (cmd in this) 
        if (first) first = false
        else buffer.print(",")
        buffer.print(cmd.to_java)
      endForEach
      return buffer.to_String
endAugment

augment CmdEscape
    method to_java.String
      return "break end_" + id
endAugment

augment CmdNextIteration
    method to_java.String
      return "continue end_" + id
endAugment

augment CmdReturnNil
    method to_java.String
      return "return"
endAugment

augment CmdReturnValue
    method to_java.String
      return "return "+ operand.to_java
endAugment

augment CmdBlock
    method to_java.String
      JavaWriter.write_end_id( this )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2
      body.to_java
      JavaWriter.indent -= 2
      JavaWriter.println( "}" )
      return null
endAugment

augment CmdTry
    method to_java.String
      JavaWriter.write_end_id( this )
      JavaWriter.println( "try" )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2
      body.to_java
      JavaWriter.indent -= 2
      JavaWriter.println( "}" )
      forEach (c in catches) c.to_java
      return null
endAugment

augment CmdCatch
    method to_java.String
      JavaWriter.println( "catch ($ $)" (var_info.type.x_name,var_info.x_name) )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2
      body.to_java
      JavaWriter.indent -= 2
      JavaWriter.println( "}" )
      return null
endAugment

augment CmdThrow
    method to_java.String
      return "throw " + operand.to_java
endAugment

augment CmdIf
    method to_java.String
      JavaWriter.write_end_id( this )
      JavaWriter.println( "if (" + condition.to_java + ")" )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2
      body.to_java
      JavaWriter.indent -= 2
      JavaWriter.println( "}" )

      forEach (e in elseifs) e.to_java

      if (else_cmd?) 
        JavaWriter.println( "else" )
        JavaWriter.println( "{" )
        JavaWriter.indent += 2
        else_cmd.to_java
        JavaWriter.indent -= 2
        JavaWriter.println( "}" )
      endIf

      return null
endAugment

augment CmdElseIf
    method to_java.String
      JavaWriter.println( "else if (" + condition.to_java + ")" )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2
      body.to_java
      JavaWriter.indent -= 2
      JavaWriter.println( "}" )
      return null
endAugment

augment CmdLoop
    method to_java.String
      JavaWriter.write_end_id( this )
      JavaWriter.println( "for (;;)" )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2
      body.to_java
      JavaWriter.indent -= 2
      JavaWriter.println( "}" )
      return null
endAugment

augment CmdWhile
    method to_java.String
      JavaWriter.write_end_id( this )
      JavaWriter.println( "while ($)" (condition.to_java) )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2
      body.to_java
      JavaWriter.indent -= 2
      JavaWriter.println( "}" )
      return null
endAugment

#{
end_block:
{
  unsatisfied_guard:
  {
    satisfied_block:
    {
      attempt_code
    }

    satisfied_code
    break end_block
  }
  unsatisfied_code
}
}#

augment CmdContingent
    method to_java.String
      JavaWriter.write_end_id( this )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2

      JavaWriter.println( "unsatisfied_$:" (id) )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2

      JavaWriter.println( "satisfied_$:" (id) )
      JavaWriter.println( "{" )
      JavaWriter.indent += 2

      body.to_java

      JavaWriter.indent -= 2
      JavaWriter.println( "}" )

      if (satisfied_body?) 
        JavaWriter.println( "{" )
        JavaWriter.indent += 2
        satisfied_body.to_java
        JavaWriter.indent -= 2
        JavaWriter.println( "}" )
      endIf
      JavaWriter.println( "break end_$;" (id) )

      JavaWriter.indent -= 2
      JavaWriter.println( "}" )

      if (unsatisfied_body?) 
        JavaWriter.println( "{" )
        JavaWriter.indent += 2
        unsatisfied_body.to_java
        JavaWriter.indent -= 2
        JavaWriter.println( "}" )
      endIf

      JavaWriter.indent -= 2
      JavaWriter.println( "}" )
      return null
endAugment

augment CmdNecessary
    method to_java.String
      JavaWriter.println( "if (!$) break unsatisfied_$;" (operand.to_java,id) )
      return null
endAugment

augment CmdSufficient
    method to_java.String
      JavaWriter.println( "if ($) break satisfied_$;" (operand.to_java,id) )
      return null
endAugment

augment CmdBreakpoint
    method to_java.String
      JavaWriter.println( "Bard.alert('breakpoint $')" (id) )
      return null
endAugment

augment CmdLiteralString
    method to_java.String
      local StringBuilder buffer(//(new ClassString("//)
      forEach (ch in value)
        if (ch >= ' ' and ch <= '~')
          which (ch)
            case '\\': buffer.print( "\\\\" )
            case '\"': buffer.print( "\\\"" );
            others:    buffer.print( Char(ch) )
          endWhich
        else
          which (ch)
            case '\t': buffer.print("\\t")
            case '\n': buffer.print("\\n")
            case '\r': buffer.print("\\r")
            others:
              if (ch <= 255)
                buffer.print( "\\" + ("00"+ch.to_String(8)).rightmost(3) )
              else
                buffer.print( "\\u$(04)" (ch.to_String(16)) )
              endIf
          endWhich
        endIf
      endForEach
      return buffer.to_String + //"))//
endAugment

augment CmdLiteralInt64
    method to_java.String
      if ((value & 0x8000000000000000)?) return "0x" + value.to_String(16) + "L"
      return value + "L"
endAugment

augment CmdLiteralInt32
    method to_java.String
      return "" + value
endAugment

augment CmdLiteralChar
    method to_java.String
      return "((char)$)" (Int32(value))
endAugment

augment CmdLiteralByte
    method to_java.String
      return "" + value
endAugment

augment CmdLiteralReal64
    method to_java.String
      if (value == Int32(value))
        return "$(.1)" (value)
      else
        return "Double.longBitsToDouble(0x$L)" ((value as Int64).to_String(16))
      endIf
endAugment

augment CmdLiteralReal32
    method to_java.String
      return "Float.intBitsToFloat(0x$)" ((value as Int32).to_String(16))
endAugment

augment CmdLiteralLogical
    method to_java.String
      return ""+value
endAugment

augment CmdLiteralNull
    method to_java.String
      return "null"
endAugment

augment CmdThisReference
    method to_java.String
      return "this"
endAugment

augment CmdSingletonReference
    method to_java.String
      return "BardGlobals.singleton_$" (of_type.x_name)
endAugment

augment CmdSingletonWrite
    method to_java.String
      return "BardGlobals.singleton_$ = $" (of_type.x_name,new_value.to_java)
endAugment

augment CmdPropertyRead
    method to_java.String
      if (context instanceOf CmdThisReference) return "$" (var_info.x_name)
      return "$.$" (context.to_java,var_info.x_name)
endAugment

augment CmdCompoundPropertyRead
    method to_java.String
      return "$.$" (context.to_java,var_info.x_name)
endAugment

augment CmdLocalVarRead
    method to_java.String
      return var_info.x_name
endAugment

augment CmdPropertyWrite
    method to_java.String
      if (context instanceOf CmdThisReference)
        return "$ = $" (var_info.x_name, new_value.to_java)
      endIf
      return "$.$ = $" (context.to_java, var_info.x_name, new_value.to_java)
endAugment

augment CmdLocalVarWrite
    method to_java.String
      return "$ = $" (var_info.x_name, new_value.to_java)
endAugment

augment CmdStaticCall
    method statement_to_java.String
      return to_java(false)

    method to_java.String
      return to_java(true)

    method to_java( Logical cast_return_value ).String
      if (method_info.type_context is TypeManager.type_generic_array)
        which (method_info.name)
          case "count":
            return "$.length" (context.to_java)
          case "copy_from":
            return "System.arraycopy($,$,$,$,$)" ...
              (args[0].(CmdWideningCast).operand.to_java, args[1].to_java,
              context.to_java,args[2].to_java,args[3].to_java)
          case "clear":
            return "Bard.clear_array($,$,$)" ...
              (context.to_java,args[0].to_java,args[1].to_java)
          others:
            return "TODO:"+method_info.x_name
        endWhich
      endIf

      local String cast = ""
      #if (cast_return_value and method_info.return_type isNot method_info.base_return_type)
        #cast = "($)" (method_info.return_type.x_name)
      #endIf

      if (context instanceOf CmdThisReference)
        if (method_info.is_native)
          return cast + JavaWriter.native_call( method_info.full_signature, 
                                       method_info.x_name, "this", args )
        else
          local var this_method = JavaWriter.this_method
          local var this_type = this_method.type_context
          if (this_type isNot method_info.type_context ...
              and this_type.methods_by_signature.contains(method_info.signature) ...
              and this_type.methods_by_signature[method_info.signature] isNot method_info)
            return "$()super.$()($)" (cast,method_info.x_name,args.to_java)
          else
            return "$()$()($)" (cast,method_info.x_name,args.to_java)
          endIf
        endIf
      endIf
      
      if (method_info.is_native)
        return cast+JavaWriter.native_call( method_info.full_signature, method_info.x_name, 
                                     context.to_java, args )
      else
        return "$()$.$()($)" (cast,context.to_java,method_info.x_name,args.to_java)
      endIf

endAugment

augment CmdDynamicCall
    method statement_to_java.String
      return to_java(false)

    method to_java.String
      return to_java(true)

    method to_java( Logical cast_return_value ).String
      if (method_info.type_context is TypeManager.type_generic_array)
        return "ARRAY:"
      endIf

      local String cast = ""
      #if (cast_return_value and method_info.return_type isNot method_info.base_return_type)
        #cast = "($)" (method_info.return_type.x_name)
      #endIf

      if (context instanceOf CmdThisReference)
        return "$()$()($)" (cast,method_info.x_name,args.to_java)
      endIf
      return "$()$.$()($)" (cast,context.to_java,method_info.x_name,args.to_java)
endAugment

augment CmdNewObject
    method to_java.String
      return "new $()($)" (of_type.x_name,args.to_java)
endAugment

augment CmdNewCompound
  METHODS
    method to_java.String
      if (args.count?)
        return "new $()($)" (of_type.x_name,args.to_java)
      else
        return "new $()" (of_type.x_name)
      endIf
endAugment

augment CmdNarrowingCast
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      if (to_type is operand.type) return operand.to_java
      return "(($)$)" (to_type.x_name,operand.to_java)
endAugment

augment CmdWideningCast
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      if (to_type is operand.type) return operand.to_java
      return "(($)$)" (to_type.x_name,operand.to_java)
endAugment

augment CmdAs
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      local var op_string = operand.to_java

      if (as_type is operand.type) return op_string

      if (as_type.is_primitive)
        whichIs (as_type)
          case TypeManager.type_real64
            return "Double.longBitsToDouble($)" (op_string)

          case TypeManager.type_real32
            return "Float.floatBitsToInt($)" (op_string)

          case TypeManager.type_int64
            return "Double.doubleToLongBits($)" (op_string)

          case TypeManager.type_int32
            return "Float.floatToIntBits($)" (op_string)

          others
            throw Error()
        endWhichIs
      endIf

      return "(($)$)" (as_type.x_name,op_string)
endAugment

augment CmdCoerceAs
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      if (as_type is operand.type) return operand.to_java
      return "(($)$)" (as_type.x_name,operand.to_java)
endAugment

augment CmdCmpInstanceOf
  METHODS
    method to_java.String
      return "($ instanceof $)" (operand.to_java,of_type.x_name)
endAugment

augment CmdNegate
  METHODS
    method to_java.String
      return "-$" (operand.to_java)
endAugment

augment CmdNot
  METHODS
    method to_java.String
      if (operand.type.is_logical)
        return "!$" (operand.to_java)
      else
        return "~" + (operand.to_java)
      endIf
endAugment


augment CmdCastToInt64
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      return "((long)$)" (operand.to_java)
endAugment

augment CmdCastToInt32
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      return "((int)$)" (operand.to_java)
endAugment

augment CmdCastToChar
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      return "((char)$)" (operand.to_java)
endAugment

augment CmdCastToByte
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      return "((byte)$)" (operand.to_java)
endAugment

augment CmdCastToReal64
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      return "((double)$)" (operand.to_java)
endAugment

augment CmdCastToReal32
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      return "((float)$)" (operand.to_java)
endAugment

augment CmdCastToLogical
  METHODS
    method statement_to_java.String
      return operand.statement_to_java

    method to_java.String
      return "($ != 0)" (operand.to_java)
endAugment

augment CmdCmpEQ
  method to_java.String
    if (lhs.type.is_compound)
      return "$.equals($)" (lhs.to_java,rhs.to_java)
    else
      return "($ == $)" (lhs.to_java,rhs.to_java)
    endIf
endAugment

augment CmdCmpNE
  method to_java.String
    if (lhs.type.is_compound)
      return "(!$.equals($))" (lhs.to_java,rhs.to_java)
    else
      return "($ != $)" (lhs.to_java,rhs.to_java)
    endIf
endAugment

augment CmdCmpLE
  method to_java.String
    return "($ <= $)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdCmpLT
  method to_java.String
    return "($ < $)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdCmpGT
  method to_java.String
    return "($ > $)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdCmpGE
  method to_java.String
    return "($ >= $)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdCmpIs
  method to_java.String
    return "($ == $)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdCmpIsNot
  method to_java.String
    return "($ != $)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdCmpIsNull
    method to_java.String
      return "($ == null)" (operand.to_java)
endAugment

augment CmdCmpIsNotNull
    method to_java.String
      return "($ != null)" (operand.to_java)
endAugment

augment CmdMathOp
    method to_java.String
      which ($symbol)
        case "%":
          return "Bard.mod($,$)" (lhs.to_java,rhs.to_java)
        case "^":
          return "Math.pow($,$)" (lhs.to_java,rhs.to_java)
        others:
          return "(" + lhs.to_java + $symbol + rhs.to_java + ")"
      endWhich
endAugment

augment CmdBitwiseOp
    method to_java.String
      which ($symbol)
        case "~": 
          return "($^$)" (lhs.to_java,rhs.to_java)
        others:
          return "(" + lhs.to_java + $symbol + rhs.to_java + ")"
      endWhich
endAugment

augment CmdLazyAnd
    method to_java.String
      return "($ && $)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdLazyOr 
    method to_java.String
      return "($ || $)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdLeftShifted
    method to_java.String
      return "($<<$)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdRightShifted
    method to_java.String
      return "Bard.shr($,$)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdRightXShifted
    method to_java.String
      return "($>>$)" (lhs.to_java,rhs.to_java)
endAugment

augment CmdArrayCreate
    method to_java.String
      local var name = of_type.x_name
      if (of_type.element_type.is_compound)
        return "$.create_array($);" (of_type.element_type.x_name,size_expr.to_java)
      else
        return "new $[$]$" (name.before_first("[]"),size_expr.to_java,name.after_first("[]"))
      endIf
endAugment

augment CmdArrayGet
    method to_java.String
      return "$[$]" (context.to_java,index_expr.to_java)
endAugment

augment CmdArraySet
    method to_java.String
      return "$[$] = $" (context.to_java,index_expr.to_java,value_expr.to_java)
endAugment

augment CmdArrayDuplicate
    method to_java.String
      return "(($)Bard.array_duplicate($))" (context.type.x_name,context.to_java)
endAugment

augment CmdThisPropertyAddAndAssign
  method to_java.String
    return "$ += $" (var_info.x_name,operand.to_java)
endAugment

augment CmdThisPropertySubAndAssign
  method to_java.String
    return "$ -= $" (var_info.x_name,operand.to_java)
endAugment

augment CmdThisPropertyMulAndAssign 
  method to_java.String
    return "$ *= $" (var_info.x_name,operand.to_java)
endAugment

augment CmdThisPropertyDivAndAssign
  method to_java.String
    return "$ = $/$" (var_info.x_name,var_info.x_name,operand.to_java)
endAugment

augment CmdThisPropertyModAndAssign
  method to_java.String
    return "$ = Bard.mod($,$)" (var_info.x_name,var_info.x_name,operand.to_java)
endAugment

augment CmdLocalVarAddAndAssign
  method to_java.String
    return "$ += $" (var_info.x_name,operand.to_java)
endAugment

augment CmdLocalVarSubAndAssign
  method to_java.String
    return "$ -= $" (var_info.x_name,operand.to_java)
endAugment

augment CmdLocalVarMulAndAssign 
  method to_java.String
    return "$ *= $" (var_info.x_name,operand.to_java)
endAugment

augment CmdLocalVarDivAndAssign
  method to_java.String
    return "$ = $/$" (var_info.x_name,var_info.x_name,operand.to_java)
endAugment

augment CmdLocalVarModAndAssign
  method to_java.String
    return "$ = Bard.mod($,$)" (var_info.x_name,var_info.x_name,operand.to_java)
endAugment

augment CmdThisPropertyIncrement
  method to_java.String
    return "++$" (var_info.x_name)
endAugment

augment CmdThisPropertyDecrement
  method to_java.String
    return "--$" (var_info.x_name)
endAugment

augment CmdLocalVarIncrement
  method to_java.String
    return "++$" (var_info.x_name)
endAugment

augment CmdLocalVarDecrement
  method to_java.String
    return "--$" (var_info.x_name)
endAugment

