#=====================================================================
# slagc.slag
#
# Slag compiler main file.
#
# $(SLAG_VERSION) $(DATE)
#
# --------------------------------------------------------------------
#
# Copyright 2010 Plasmaworks LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#   http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, 
# software distributed under the License is distributed on an 
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific 
# language governing permissions and limitations under the License.
#
# History:
#   2008.12.15 / Abe Pralle - Created
#   2009.12.28 / Abe Pralle - Updated for v3 compiler.
#=====================================================================

# TODO: add object poison

[include "big_int.slag"]
[include "bit_io.slag"]

[include "analyzer.slag"]
[include "etc_writer.slag"]
[include "cpp_writer.slag"]
[include "cs_writer.slag"]
[include "java_writer.slag"]

#[main SlagScannerTest]

singleton class SlagCompiler
  PROPERTIES
    version="v4.0.0 (" DATE ")" : String
    byte_alignment=4   : Int32

    filenames()        : String[]
    source_dirs()      : String[]
    dest_dir           : File
    exe_dir            : File
    includes()         : String[]
    thorough           : Logical
    quiet              : Logical
    output_name        : String
    error_log_name     : String
    nostdlib           : Logical
    code_target="etc"  : String
    platform="CONSOLE" : String
    force_native()     : String[]
    inspect            : String
    slagdoc_type       : String
    help_type          : String
    allow_generic=true : Logical
    java_package=""    : String

  METHODS
    method print_usage
      println( //Slag Compiler $// (version) )
      println( //Usage: slagc [-? | -help] filenames[.slag]// )
      println( //       [-doc Type[::member_name]]// )
      println( //       [-thorough] [-src_path "path1;path2"]// )
      println( //       [-include libname[.slag]] [-nostdlib]// )
      println( //       [-etc|-cpp [-use_longjmp]] [-define define_id[:value]]// )
      println( //       [-platform TARGET_PLATFORM (default CONSOLE)]// )
      println( //       [-dest_path "path"] [-output "outputfilename"]// )
      println( //       [-native "Type::fn_name(ArgType)" -native ...] // )
      println( //       [-output "outputfilename"] [-quiet]// )

    method init
      try
        local var exe_path = File(System.exe_filepath).path
        source_dirs.add( exe_path )
        if (File(exe_path+"/libraries").exists)
          source_dirs.add( exe_path + "/libraries" )
          source_dirs.add( exe_path + "/libraries/standard" )
        endIf
        process_args
      catch (CompilerError err)
        println( err.message.word_wrap(66).format("$[\n$]") )
        System.exit_program(1)
      catch (SlagError err)
        Errors.add(err)
        Errors.print
        System.exit_program(1)
      catch (Error err)
        println( "INTERNAL ERROR" )
        if (Errors.any) Errors.print
        else println(err)
        System.exit_program(1)
      endTry

    method process_args
      local var args = command_line_args.create_reader

      forEach (arg in args)
        which (arg)
          case "-?", "-help":
            print_usage
            return

          case "-doc":
            if (args.has_another)
              help_type = args.read
              quiet = true
            else 
              print_usage
              return
            endIf

          case "-thorough":   thorough = true
          case "-quiet":      quiet = true
          case "-src_path":
            if (args.has_another)
              forEach (path in args.read.split(';'))
                local File dir(path)
                if (dir.exists) source_dirs.add( dir.absolute_filepath )
              endForEach
            else
              throw CompilerError( //ERROR: '-src_path' should be followed by //
                                   //a path string, e.g. "path1;path2;...".// )
            endIf

          case "-define":
            if (args.has_another)
              local var def = args.read
              if (def.contains(':'))
                local var def_id    = def.before_first(':')
                local var def_value = def.after_first(':')
                SlagScanner.add_define(def_id,def_value)
              else
                SlagScanner.add_define(def,def)
              endIf
            else
              throw CompilerError( //ERROR: '-define' should be followed by an //
                  //id or an id:value pair, e.g. "DEBUG:true".// )
            endIf

          case "-platform":
            if (args.has_another)
              platform = args.read.to_uppercase
            else
              throw CompilerError( //ERROR: '-platform' should be followed by an //
                  //identifier such as CONSOLE or ANDROID.// )
            endIf

          case "-include":
            if (args.has_another)
              includes.add( args.read )
            else
              throw CompilerError( //ERROR: '-include' should be followed by a //
                                   //filename, e.g. "standard.slag".// )
            endIf

          case "-nostdlib":
            nostdlib = true

          case "-dest_path":
            if (args.has_another)
              set_dest_path( args.read )
            else
              throw CompilerError( //ERROR: '-dest_path' should be followed by a single path, e.g. "build".// )
            endIf

          case "-native":
            if (args.has_another)
              force_native.add( args.read )
            else
              throw CompilerError( //ERROR: '-native' should be followed by a method signature to force native, e.g. "Type::fn_name(ArgType)".// )
            endIf

          case "-output":
            if (args.has_another)
              output_name = args.read
              if ((output_name.contains('/') or output_name.contains('\\')) ...
                  and output_name.count > 0)
                local File f(output_name)
                set_dest_path( f.path )
                output_name = f.filename
              endIf
            else
              throw CompilerError( //ERROR: '-output' should be followed by a base filename, e.g. "game".// )
            endIf

          case "-inspect":
            if (args.has_another)
              inspect = args.read
            else
              throw CompilerError( //ERROR: '-inspect' should be followed by "TypeName" or "TypeName::method_name(ArgTypes)"// )
            endIf

            #{
          case "-error_log":
            if (args.has_another)
              error_log_name = args.read
            else
              throw CompilerError( //ERROR: '-error_log' should be followed by a filename, e.g. "errors.txt".// )
            endIf
            }#

          case "-slagdoc":
            if (args.has_another)
              slagdoc_type = args.read
            else
              throw CompilerError( //ERROR: Follow '-slagdoc' with a type name, e.g. "String".// )
            endIf

          case "-exe":
            if (args.has_another)
              local var exe_path = args.read
              if (exe_path.contains(';'))
                throw CompilerError( "ERROR: Only one folder may be specified by 'exe'." )
              endIf
              exe_dir = File(exe_path)
              if (not exe_dir.exists)
                throw CompilerError( //ERROR: Executable resource path "$" doesn't exist.// (exe_path) )
              endIf
              exe_dir = File( exe_dir.absolute_filepath )
            else
              throw CompilerError( //ERROR: '-exe' should be followed by a single path, e.g. "dist".// )
            endIf

          case "-noexe": exe_dir = null

          case "-etc":  code_target = "etc"
          case "-cpp":  code_target = "cpp"
          case "-use_longjmp": CPPWriter.use_longjmp = true

          case "-cs": 
            code_target = "cs"
            allow_generic = false

              #case "-js":   code_target = "js"
          case "-java": 
            code_target = "java"
            allow_generic = false

          case "-java_package"
            if (args.has_another)
              java_package = args.read
            else
              throw CompilerError(//ERROR: '-java_package' should be followed by a package name.//)
            endIf


          others:
            if (arg.count?)
              if (arg[0] == '-') 
                throw CompilerError( //Unknown option "$" - type "slagc -?" for usage options.// (arg) )
              else
                if (not filenames.contains(arg)) filenames.add(arg)
              endIf
            endIf
        endWhich
      endForEach

      SlagScanner.add_define("PLATFORM",//"$"// (platform))
      SlagScanner.add_define("PLATFORM_"+platform,"true")

      if (filenames.count == 0) 
        if (command_line_args.count?)
          throw CompilerError( //ERROR: Missing filename to compile.// )
        else
          print_usage
          return
        endIf
      endIf

      if (not nostdlib) includes.add( "standard.slag" )

      forEach (index of includes)
        includes[index] = find_file( includes[index] )
      endForEach

      forEach (filename in filenames)
        compile( find_file(filename) )
      endForEach

    method set_dest_path( String dest_path )
      if (dest_dir?)
        throw CompilerError( "ERROR: multiple destination paths defined." )
      endIf

      if (dest_path.contains(';'))
        throw CompilerError( "ERROR: Only one folder may be specified by 'dest_path'." )
      endIf
      dest_dir = File(dest_path)
      if (not dest_dir.exists)
        throw CompilerError( //ERROR: Destination path "$" doesn't exist.// (dest_path) )
      endIf
      dest_dir = File( dest_dir.absolute_filepath )
      #return true

    method compile( String filename )
      filename = filename.before_last( ".etc" )
      filename = filename.before_last( ".exe" )
      filename = filename.before_last( ".slag" )
      filename += ".slag"

      if (output_name is null) output_name = filename
      local String outname = output_name
      outname = outname.before_last( ".etc" )
      outname = outname.before_last( ".exe" )
      outname = outname.before_last( ".slag" )

      local var src = filename.after_last('/').after_last('\\')

      local var dest_dir_name = ""
      if (dest_dir?)
        dest_dir_name = dest_dir.absolute_filepath + "/"
      endIf
      outname = dest_dir_name + outname.after_last('/').after_last('\\')
      outname = File(outname).absolute_filepath
      local var dest = outname.after_last('/').after_last('\\')

      local Stopwatch timer()
      local SlagParser parser()
      parser.src_paths = source_dirs
      parser.include( filename )
      forEach (file in includes) parser.include( file )

      if (not quiet) println( "Compiling $..." (src) )
      local var success = parser.parse_pending
  
      if (success) 
        success = SlagAnalyzer.analyze_parsed_types
      endIf

      if (success)
        if (help_type?) return

        if (inspect?)
          if (inspect.contains("::"))
            local var type_name = inspect.before_first("::")
            if (TypeManager.types.contains(type_name))
              local var type = TypeManager[type_name]
              local var m = type.find_method(inspect.after_first("::"))
              if (m?)
                println( m.body )
              else
                println( //Inspect: no such method "$".// (inspect) )
              endIf
            else
              println( //Inspect: no such type "$".// (type_name) )
            endIf
          else
            if (TypeManager.types.contains(inspect))
              TypeManager[inspect].display
            else
              println( //Inspect: no such type "$".// (inspect) )
            endIf
          endIf
        endIf

        forEach (sig in force_native)
          local var entry = TypeManager.types.find( sig.before_first(':') )
          if (entry?)
            local var type = entry.value
            local var m = type.find_method(sig.after_first("::"))
            if (m?)
              m.qualifiers |= Qualifiers.qual_native
              m.body.statements.clear
              m.supports_inlining = false
            else
              println( "-native: No such method $ in type $." (sig.after_first("::"),type.name) )
            endIf
          else
            println( //-native: No such type "$".// (sig.before_first(':')) )
          endIf
        endForEach

        which (code_target)
          case "etc":
            if (not quiet) println( "  Writing $.etc" (outname) )
            ETCWriter.write( File(outname+".etc") )

          case "cpp":
            CPPWriter.write(outname)

          case "cs":
            CSWriter.write(outname)

            #case "js":
            #JSWriter.write(outname)

          case "java":
            JavaWriter.write(outname)

          #case "java":
            #print( "Compiling $ to $.java... " (src,dest) )
            #JavaWriter().write( program, outname )
            
        endWhich
        if (not quiet) println( "Success! ($)" (timer) )
        #if (error_log_name?) analyzer.print_errors_to_file( error_log_name )
      else
        Errors.print
        #if (error_log_name?) analyzer.print_errors_to_file( error_log_name )
        System.exit_program(1)
      endIf

    method find_file( String filename ).String
      if (File(filename).exists) return File(filename).absolute_filepath

      forEach (dir in source_dirs)
        local File file( "$/$"(dir,filename) )
        if (file.exists) return file.absolute_filepath
      endForEach

      if (not filename.ends_with(".slag")) return find_file( filename + ".slag" )

      throw CompilerError( //ERROR: Unable to locate file "$" or folder "$".// ...
          (filename,filename.before_last(".slag")) )

endClass

class CompilerError : Error;

augment String
  METHODS
    method rep( Int32 total_width ).String
      local StringBuilder buffer( total_width + count )
      while (buffer.count < total_width) buffer.print( this )
      return buffer.to_String.leftmost(total_width)
endAugment


#{
singleton class SlagDocDescription
  METHODS
    method get( String doc_comment ).String
      if (not doc_comment?) return ""
      local StringBuilder buffer()
      local StringBuilder line_buffer()
      local var in_code_sample = false
      forEach (line in LineReader(doc_comment))
        if (line.trim.count == 0)
          if (in_code_sample)
            line_buffer.println
          elseIf (line_buffer.count?)
            buffer.println( "<li>$</li>" (line_buffer) )
            line_buffer.clear
          endIf
        else
          if (line[1] == ' ') 
            if (not in_code_sample)
              line_buffer.print( "<pre>" )
              in_code_sample = true
            endIf
            line_buffer.println( SlagDocFilter[line.substring(1)] )
          else
            if (in_code_sample)
              line_buffer.println( "</pre>" )
              in_code_sample = false
            elseIf (line[1] == '-')
              line_buffer.println( "<br />" )
            endIf
            line_buffer.print( SlagDocFilter[line.substring(1)] )
            line_buffer.print( ' ' )
          endIf
        endIf
      endForEach
      if (line_buffer.count?)
        if (in_code_sample) line_buffer.println( "</pre>" )
        buffer.println( "<li>$</li>" (line_buffer))
      endIf

      return buffer.to_String

endClass

singleton class SlagDocFilter : HTMLFilter
  METHODS
    method get( String st ).String
      if (st.begins_with("List<<")) return get( st.after_first("<<").before_last(">>") + "[]" )
      return prior.get(st)

    method get( Reader<<Char>> reader ).String
      return get( String(reader) )
endClass

}#
