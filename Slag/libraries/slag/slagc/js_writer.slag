#=====================================================================
# js_writer.slag
#
# History:
#   2010.01.20 / Abe Pralle - Created
#=====================================================================

singleton class JSWriter
  PROPERTIES
    out         : TextWriter
    indent      : Int32
    col=1       : Int32
    auto_id=1   : Int32
    lines       : Int32
    num_files   : Int32

    output_filename, base_name : String
    referenced_end_method : Logical
    
    this_method : MethodInfo

  METHODS
    method auto_id.Int32
      local var result = &auto_id
      ++&auto_id
      return result

    method write( output_filename )
      if (not SlagCompiler.quiet) Global.println( "  Writing $.js" (output_filename) )
      out = File(output_filename+".js").create_writer
      base_name = output_filename.after_last('/').after_last('\\')

      # Assign default cross-compilation names
      forEach (type in TypeManager.type_list) type.x_name
      forEach (m in TypeManager.method_list)  m.x_name

      print_header
      println

      print_helper_functions
      println

      #forEach (m in TypeManager.method_list) print_prototype(m)
      #println

      print_types

      forEach (m in TypeManager.method_list)
        print_method(m)
      endForEach

      #print_runtime_info

      out.close

    method do_indent
      while (col <= indent) out.print(' '); col++

    method print( Char ch )
      do_indent
      out.print( ch )
      col++

    method print( String st )
      do_indent
      forEach (ch in st) print(ch)

    method print( Int32 n )
      do_indent
      out.print( n )
      col += (""+n).count

    method print( Real64 n )
      do_indent
      out.print( n )
      col += (""+n).count

    method print( Logical b )
      do_indent
      out.print( b )
      if (b) col += 4
      else   col += 5

    method println( String st )
      print( st )
      println

    method println( Int32 n )
      print( n )
      println
    
    method println( Char ch )
      print( ch )
      println

    method println
      out.println
      col = 1
      lines++

    method print_header
      print( "//" )
      forEach (1..77) print('=')
      println
      println( "//  $.js" (output_filename) )
      println( "//  Generated by slagc $" (Date()) )
      print( "//" )
      forEach (1..77) print('=')
      println

    method print_helper_functions
      println( //function dispatch()// )
      println( //{// )
      println( //  var args = Array.prototype.slice.call(arguments);// )
      println( //  var context = args.shift();// )
      println( //  var index   = args.shift();// )
      println( //  args.unshift(context);// )
      println( //  context.dispatch_table[index].apply(null,args);// )
      println( //}// )

    method print_types
      forEach (type in TypeManager.type_list)
        if (type is TypeInfo.type_null) nextIteration
        if (not (type.is_class or type.is_compound)) nextIteration
        println( //var $_info = { name: "$" };// (type.x_name,type.name) )
      endForEach
      println

      forEach (type in TypeManager.type_list)
        if (type is TypeInfo.type_null) nextIteration
        if (not type.is_class) nextIteration
        print( "$_info.base_types = [" (type.x_name) )
        local var first = true
        forEach (base_type in type.flat_base_types)
          if (first) first=false
          else print(',')
          print( "$_info" (base_type.x_name) )
        endForEach
        println( "];" )
      endForEach
      println

      forEach (type in TypeManager.type_list)
        if (type is TypeInfo.type_null) nextIteration
        if (not type.is_class) nextIteration
        print( "$_info.dispatch_table = [" (type.x_name) )
        local var first = true
        forEach (m in type.dispatch_table)
          if (first) first=false
          else print(',')
          if (m?) print(m.x_name)
          else print("null")
        endForEach
        println( "];" )
      endForEach
      println

    method print_prototype( MethodInfo m )
      if (not (m.is_requisite or m.is_native)) print( "static " )
      println( "void $()();" (m.x_name) )

    method print_method( MethodInfo m )
      if (m.is_native or m.is_abstract) return

      this_method = m
      referenced_end_method = false

      print( "function $()(THIS" (m.x_name) )
      local var first = false
      forEach (p in m.parameters)
        print(',')
        print(p.x_name)
      endForEach

      if (m.type_context.is_aspect or m.is_abstract)
        println( ") { }" )
        return
      else
        println( ")\n{" )
      endIf

      indent += 2
      m.body.to_js
      indent -= 2

      println( "}" )
      println

    method write_structure_id( CmdStructure cmd )
      if (cmd.referenced)
        println( "label_$:" (cmd.id) )
      endIf
endClass

augment Cmd
    method to_js.String
      throw Error( "to_js() undefined for type " + type_name )
endAugment

augment CmdStatementList
    method to_js.String
      forEach (statement in statements) 
        local var st = statement.to_js
        if (st?) JSWriter.print(st); JSWriter.println(';')
      endForEach
      return null
endAugment

augment CmdList
    method to_js.String
      local StringBuilder buffer()
      local var first = true
      forEach (cmd in this) 
        if (first) first = false
        else buffer.print(",")
        buffer.print(cmd.to_js)
      endForEach
      return buffer.to_String
endAugment

augment CmdEscape
    method to_js.String
      return "break label_" + id
endAugment

augment CmdNextIteration
    method to_js.String
      return "continue label_" + id
endAugment

augment CmdReturnNil
    method to_js.String
      return "return"
endAugment

augment CmdReturnValue
    method to_js.String
      return "return "+ operand.to_js
endAugment

augment CmdBlock
    method to_js.String
      JSWriter.write_structure_id( this )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      body.to_js
      JSWriter.indent -= 2
      JSWriter.println( "}" )
      return null
endAugment

augment CmdTry
    method to_js.String
      JSWriter.write_structure_id( this )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      body.to_js
      JSWriter.indent -= 2
      JSWriter.println( "}" )
      forEach (c in catches) c.to_js
      return null
endAugment

augment CmdCatch
    method to_js.String
      JSWriter.println( "catch ($)" (var_info.x_name) )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      body.to_js
      JSWriter.indent -= 2
      JSWriter.println( "}" )
      return null
endAugment

augment CmdThrow
    method to_js.String
      return "throw " + operand.to_js
endAugment

augment CmdIf
    method to_js.String
      JSWriter.write_structure_id( this )
      JSWriter.println( "if (" + condition.to_js + ")" )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      body.to_js
      JSWriter.indent -= 2
      JSWriter.println( "}" )

      forEach (e in elseifs) e.to_js

      if (else_cmd?) 
        JSWriter.println( "{" )
        JSWriter.indent += 2
        else_cmd.to_js
        JSWriter.indent -= 2
        JSWriter.println( "}" )
      endIf

      return null
endAugment

augment CmdElseIf
    method to_js.String
      JSWriter.println( "else if (" + condition.to_js + ")" )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      body.to_js
      JSWriter.indent -= 2
      JSWriter.println( "}" )
      return null
endAugment

augment CmdLoop
    method to_js.String
      JSWriter.write_structure_id( this )
      JSWriter.println( "for (;;)" )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      body.to_js
      JSWriter.indent -= 2
      JSWriter.println( "}" )
      return null
endAugment

augment CmdWhile
    method to_js.String
      JSWriter.write_structure_id( this )
      JSWriter.println( "while ($)" (condition.to_js) )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      body.to_js
      JSWriter.indent -= 2
      JSWriter.println( "}" )
      return null
endAugment

augment CmdContingent
    method to_js.String
      JSWriter.println( "label_$:" (id) )
      JSWriter.write_structure_id( this )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      JSWriter.println( "satisfied_$:" (id) )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      JSWriter.println( "body_$:" (id) )
      JSWriter.println( "{" )
      JSWriter.indent += 2
      body.to_js
      JSWriter.indent -= 2
      JSWriter.println( "}" )
      if (satisfied_body?) satisfied_body.to_js
      JSWriter.println( "break label_$" (id) )
      JSWriter.indent -= 2
      JSWriter.println( "}" )
      if (unsatisfied_body?) unsatisfied_body.to_js
      JSWriter.indent -= 2
      JSWriter.println( "}" )
      return null
endAugment

augment CmdNecessary
    method to_js.String
      JSWriter.println( "if (!$) break satisfied_$" (operand,id) )
      return null
endAugment

augment CmdSufficient
    method to_js.String
      JSWriter.println( "if ($) break body_$" (operand,id) )
      return null
endAugment

augment CmdBreakpoint
    method to_js.String
      JSWriter.println( "alert('breakpoint $')" (id) )
      return null
endAugment

augment CmdLiteralString
    method to_js.String
      local StringBuilder buffer('"')
      forEach (ch in value)
        if (ch >= ' ' and ch <= '~')
          which (ch)
            case '\\': buffer.print( "\\\\" )
            case '\"': buffer.print( "\\\"" );
            others:    buffer.print( Char(ch) )
          endWhich
        else
          if (ch <= 255)
            buffer.print( "\\x$(02)" (ch.to_String(16)) )
          else
            buffer.print( "\\u$(04)" (ch.to_String(16)) )
          endIf
        endIf
      endForEach
      return buffer.to_String + '"'
endAugment

augment CmdLiteralInt64
    method to_js.String
      return "" + value
endAugment

augment CmdLiteralInt32
    method to_js.String
      return "" + value
endAugment

augment CmdLiteralChar
    method to_js.String
      return "" + Int32(value)
endAugment

augment CmdLiteralByte
    method to_js.String
      return "" + value
endAugment

augment CmdLiteralReal64
    method to_js.String
      return "" + value
endAugment

augment CmdLiteralReal32
    method to_js.String
      return "" + value
endAugment

augment CmdLiteralLogical
    method to_js.String
      which (value)
        case true:  return "1"
        case false: return "0"
        others:     return "-1"
      endWhich
endAugment

augment CmdLiteralNull
    method to_js.String
      return "null"
endAugment

augment CmdThisReference
    method to_js.String
      return "THIS"
endAugment

augment CmdSingletonReference
    method to_js.String
      return "singletons[$]" (of_type.index)
endAugment

augment CmdSingletonWrite
    method to_js.String
      return "singletons[$] = $" (of_type.index,new_value.to_js)
endAugment

augment CmdPropertyRead
    method to_js.String
      return "$.$" (context.to_js,var_info.x_name)
endAugment

augment CmdCompoundPropertyRead
    method to_js.String
      return "$.$" (context.to_js,var_info.x_name)
endAugment

augment CmdLocalVarRead
    method to_js.String
      return var_info.x_name
endAugment

augment CmdPropertyWrite
    method to_js.String
      return "$.$ = $" (context.to_js, var_info.x_name, new_value.to_js)
endAugment

augment CmdLocalVarWrite
    method to_js.String
      return "$ = $" (var_info.x_name, new_value.to_js)
endAugment

augment CmdStaticCall
    method to_js.String
      if (args.count?)
        return "$()($,$)" (method_info.x_name,context.to_js,args.to_js)
      else
        return "$()($)" (method_info.x_name,context.to_js)
      endIf
endAugment

augment CmdDynamicCall
    method to_js.String
      if (args.count?)
        return "dispatch($,$,$)" (context.to_js,method_info.group.index,args.to_js)
      else
        return "dispatch($,$)" (context.to_js,method_info.group.index)
      endIf
endAugment

augment CmdNewObject
    method to_js.String
      if (args.count?)
        return "$()(new $()(),$)" (method_info.x_name,of_type.x_name,args.to_js)
      else
        return "$()(new $()())" (method_info.x_name,of_type.x_name)
      endIf
endAugment

augment CmdNewCompound
  METHODS
    method to_js.String
      if (args.count?)
        return "new $()($)" (of_type.x_name,args.to_js)
      else
        return "new $()" (of_type.x_name)
      endIf
endAugment

augment CmdNarrowingCast
  METHODS
    method to_js.String
      return operand.to_js
endAugment

augment CmdWideningCast
  METHODS
    method to_js.String
      return operand.to_js
endAugment

augment CmdAs
  METHODS
    method to_js.String
      return "cmd_as($,$)" (operand.to_js,as_type.x_name)
endAugment

augment CmdCoerceAs
  METHODS
    method to_js.String
      return operand.to_js
endAugment

augment CmdCmpInstanceOf
  METHODS
    method to_js.String
      return "cmd_instance_of($,$)" (operand.to_js,of_type.x_name)
endAugment

augment CmdNegate
  METHODS
    method to_js.String
      return "-$" (operand.to_js)
endAugment

augment CmdNot
  METHODS
    method to_js.String
      return "!$" (operand.to_js)
endAugment

augment CmdCastToInt64
  METHODS
    method to_js.String
      return operand.to_js
endAugment

augment CmdCastToInt32
  METHODS
    method to_js.String
      return operand.to_js
endAugment

augment CmdCastToChar
  METHODS
    method to_js.String
      return operand.to_js
endAugment

augment CmdCastToByte
  METHODS
    method to_js.String
      return operand.to_js
endAugment

augment CmdCastToReal64
  METHODS
    method to_js.String
      return operand.to_js
endAugment

augment CmdCastToReal32
  METHODS
    method to_js.String
      return operand.to_js
endAugment

augment CmdCastToLogical
  METHODS
    method to_js.String
      return "cmd_cast_to_logical($)" (operand.to_js)
endAugment

augment CmdCmpEQ
  method to_js.String
    return "($ == $)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdCmpNE
  method to_js.String
    return "($ != $)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdCmpLE
  method to_js.String
    return "($ <= $)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdCmpLT
  method to_js.String
    return "($ < $)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdCmpGT
  method to_js.String
    return "($ > $)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdCmpGE
  method to_js.String
    return "($ >= $)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdCmpIs
  method to_js.String
    return "($ == $)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdCmpIsNot
  method to_js.String
    return "($ != $)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdCmpIsNull
    method to_js.String
      return "($ == null)" (operand.to_js)
endAugment

augment CmdCmpIsNotNull
    method to_js.String
      return "($ != null)" (operand.to_js)
endAugment

augment CmdMathOp
    method to_js.String
      return "(" + lhs.to_js + $symbol + rhs.to_js + ")"
endAugment

augment CmdBitwiseOp
    method to_js.String
      return "(" + lhs.to_js + $symbol + rhs.to_js + ")"
endAugment

augment CmdLazyAnd
    method to_js.String
      return "($&&$)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdLazyOr 
    method to_js.String
      return "($||$)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdLeftShifted
    method to_js.String
      return "($<<$)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdRightShifted
    method to_js.String
      return "shr($,$)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdRightXShifted
    method to_js.String
      return "($>>$)" (lhs.to_js,rhs.to_js)
endAugment

augment CmdArrayCreate
    method to_js.String
      return "new Array($)" (size_expr.to_js)
endAugment

augment CmdArrayGet
    method to_js.String
      return "$[$]" (context.to_js,index_expr.to_js)
endAugment

augment CmdArraySet
    method to_js.String
      return "$[$]=$" (context.to_js,index_expr.to_js,value_expr.to_js)
endAugment

augment CmdThisPropertyAddAndAssign
  method to_js.String
    return "THIS.$ += $" (var_info.x_name,operand.to_js)
endAugment

augment CmdThisPropertySubAndAssign
  method to_js.String
    return "THIS.$ -= $" (var_info.x_name,operand.to_js)
endAugment

augment CmdThisPropertyMulAndAssign 
  method to_js.String
    return "THIS.$ *= $" (var_info.x_name,operand.to_js)
endAugment

augment CmdThisPropertyDivAndAssign
  method to_js.String
    return "THIS.$ = slag_divide(THIS.$,$)" (var_info.x_name,var_info.x_name,operand.to_js)
endAugment

augment CmdThisPropertyModAndAssign
  method to_js.String
    return "THIS.$ = slag_mod(THIS.$,$)" (var_info.x_name,var_info.x_name,operand.to_js)
endAugment

augment CmdLocalVarAddAndAssign
  method to_js.String
    return "$ += $" (var_info.x_name,operand.to_js)
endAugment

augment CmdLocalVarSubAndAssign
  method to_js.String
    return "$ -= $" (var_info.x_name,operand.to_js)
endAugment

augment CmdLocalVarMulAndAssign 
  method to_js.String
    return "$ *= $" (var_info.x_name,operand.to_js)
endAugment

augment CmdLocalVarDivAndAssign
  method to_js.String
    return "$ = slag_divide($,$)" (var_info.x_name,var_info.x_name,operand.to_js)
endAugment

augment CmdLocalVarModAndAssign
  method to_js.String
    return "$ = slag_mod($,$)" (var_info.x_name,var_info.x_name,operand.to_js)
endAugment

augment CmdThisPropertyIncrement
  method to_js.String
    return "++THIS.$" (var_info.x_name)
endAugment

augment CmdThisPropertyDecrement
  method to_js.String
    return "--THIS.$" (var_info.x_name)
endAugment

augment CmdLocalVarIncrement
  method to_js.String
    return "++$" (var_info.x_name)
endAugment

augment CmdLocalVarDecrement
  method to_js.String
    return "--$" (var_info.x_name)
endAugment

