#=====================================================================
# yscript.slag
#
# Framework for the YScript scripting language.
#
# $(SLAG_VERSION) $(DATE)
#
# --------------------------------------------------------------------
#
# Copyright 2008-2011 Plasmaworks LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#   http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, 
# software distributed under the License is distributed on an 
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific 
# language governing permissions and limitations under the License.
#
#=====================================================================

singleton class YS
  # YScript runtime.
  PROPERTIES
    data()      : YSValue[]
    commands()  : YSCmd[]

    #types(256)    : ReferenceTable<<String,YSType>>
    command_table(256) : ReferenceTable<<String,YSNativeCmd>>

  METHODS
    method reset
      data.clear
      commands.clear

    method push( Real64 value )
      data.add( YSNumber(value) )

    method push( String value )
      data.add( YSString(value) )

    method pop.YSValue
      if (data.count == 0) return null
      return data.remove_last

    method pop_Real64.Real64
      if (data.count == 0) return 0
      local var value = data.remove_last
      if (value is null) return 0
      return value.as_Real64

    method push_cmd( YSCmd cmd )
      commands.add( cmd )

    method update.Logical
      while (commands.count?)
        if (not commands.remove_last.execute) return false
      endWhile
      return true

endClass

class YSNativeCmd
  PROPERTIES
    cmd : YSCmd
    keyword, arg_format : String

  METHODS
    method init( cmd, keyword, arg_format=null )
      keyword .= consolidate
      YS.command_table[keyword] = this

endClass


class YSCmd
  METHODS
    method init

    method init( String keyword, String arg_format=null )
      YSNativeCmd( this, keyword, arg_format )

    method push
      YS.push_cmd( this )

    method execute.Logical
      return true

    method execute( YSArgs args ).Logical
      return execute
endClass

class YSBinaryOp( YSCmd lhs, YSCmd rhs ) : YSCmd
  METHODS
    method push
      YS.push_cmd( this )
      lhs.push
      rhs.push

endClass

class YSCmdAdd : YSBinaryOp
  METHODS
    method execute.Logical
      local var b = YS.pop
      local var a = YS.pop
      if (a is null) a = YSString("null")
      if (b is null) b = YSString("null")

      if (a instanceOf YSString or b instanceOf YSString)
        YS.push( a.as_String + b.as_String )
      else
        YS.push( a.as_Real64 + b.as_Real64 )
      endIf
      return true
endClass

class YSCmdSubtract : YSBinaryOp
  METHODS
    method execute.Logical
      local var b = YS.pop
      local var a = YS.pop
      if (a is null) a = YSNumber(0)
      if (b is null) b = YSNumber(0)

      YS.push( a.as_Real64 - b.as_Real64 )
      return true
endClass

class YSCmdMultiply : YSBinaryOp
  METHODS
    method execute.Logical
      local var b = YS.pop
      local var a = YS.pop
      if (a is null) a = YSNumber(0)
      if (b is null) b = YSNumber(0)

      YS.push( a.as_Real64 * b.as_Real64 )
      return true
endClass

class YSValue : YSCmd
  METHODS
    method push
      YS.data.add( this )

    method as_Real64.Real64
      return 0

    method as_String.String
      return to_String
endClass

class YSNumber( Real64 value ) : YSValue
  METHODS
    method as_Real64.Real64
      return value

    method to_String.String
      if (floor(value) == value) return ""+Int64(value)
      return ""+value
endClass
 
class YSString( String value ) : YSValue
  METHODS
    method as_Real64.Real64
      return value.to_Real64

    method to_String.String
      return value
endClass
 
class YSTrace( YSCmd value ) : YSCmd
  METHODS
    method push
      YS.push_cmd( this )
      value.push

    method execute.Logical
      local var n = YS.pop.as_Real64
      println( "@" + n )
      return false
endClass

class YSScriptExecution : YSCmd
  PROPERTIES
    script       : YScript
    statements() : YSCmd[]
    ip           : Int32

  METHODS
    method init( script )
      statements = script.statements

    method push
      YS.push_cmd( this )
      statements.first.push

    method execute.Logical
      ++ip
      if (ip < statements.count)
        YS.push_cmd(this)
        statements[ip].push
      else 
        script.cur_cmd = null
      endIf
      return true
endClass

class YScript
  PROPERTIES
    statements() : YSCmd[]
    cur_cmd      : YSCmd

  METHODS
    method init( String data )
      YSParser( this, data ).parse

    method update.Logical
      if (cur_cmd is null)
        if (statements.count == 0) return false  # done
        cur_cmd = YSScriptExecution( this )
        cur_cmd.push
      endIf

      while (cur_cmd? and YS.update) noAction
      return (cur_cmd?)

endClass

class YSParser
  PROPERTIES
    yscript    : YScript
    reader     : ParseReader
    statements : YSCmd[]

  METHODS
    method init( yscript, String data )
      reader = ParseReader( data )
      statements = yscript.statements

    method parse
      while (parse_next) noAction

    method parse_next.Logical
      while (reader.consume('\n') or reader.consume_ws) noAction
      if (not reader.has_another) return false

      statements.add( parse_expression )
      return true

    method parse_id.String
      local StringBuilder buffer()
      buffer.add( reader.read )
      local var ch = reader.peek
      while ((ch>='a' and ch<='z') or (ch>='A' and ch<='Z') or (ch>='0' and ch<='9') or ch == '_')
        buffer.add( reader.read )
        ch = reader.peek
      endWhile
      return buffer.to_String.consolidate

    method handle_id( String id, ParsePos pos ).YSCmd
      local var cmd_def = YS.command_table[id]
      if (cmd_def?)
        local YSNativeCall native_call( cmd_def.cmd )
        if (cmd_def.arg_format?)
          # Retrieve arguments
          local Scanner scanner(cmd_def.arg_format)
          while (scanner.has_another)
            if (scanner.next_is_id)
              local var arg_id = scanner.scan_id
              scanner.must_consume(':')
              local var expr = parse_arg_type( scanner.scan_id )
              native_call.add_arg( arg_id, expr )
              nextIteration
            else
              local var line = reader.cur_pos.line
              local var ch = scanner.scan_Char
              if (not reader.consume(ch))
                println( "YS Expected '$' on line $." (ch,line) )
              endIf
            endIf
          endWhile
        endIf
        reader.consume_ws
        reader.consume('\n')
        return native_call
      endIf

      println( "YS Unknown Identifier on line $: $" (pos.line,id) )
      return YSNumber(0)

    method parse_arg_type( String arg_type ).YSCmd
      which (arg_type)
        case "expression"
          return parse_expression

        others
          println( "YS Unknown Arg Type: " + arg_type )
          return null
      endWhich

    method parse_expression.YSCmd
      reader.consume_ws
      return parse_term

    method parse_term.YSCmd
      local var line = reader.cur_pos.line

      local var ch = reader.peek
      if (ch >= '0' and ch <= '9')
        return parse_number
      endIf

      if ((ch>='a' and ch<='z') or (ch>='A' and ch<='Z') or ch == '_')
        local var pos = reader.cur_pos
        return handle_id( parse_id, pos )
      endIf

      local var pos = reader.cur_pos
      println( "YS Syntax Error on line $: $" (pos.line,reader.read_line) )
      return YSNumber(0)

    method parse_number.YSCmd
      local Real64 n = (reader.read - '0')
      local var ch = reader.peek
      while (ch >= '0' and ch <= '9')
        reader.read
        n = n * 10 + (ch - '0')
        ch = reader.peek
      endWhile

      if (reader.peek == '.')
        ch = reader.peek(2)
        if (ch>='0' and ch<='9')
          reader.read  # the decimal point
          local var decimal_digits = 0
          ch = reader.peek
          while (ch >= '0' and ch <= '9')
            reader.read
            n = n * 10 + (ch - '0')
            ++decimal_digits
            ch = reader.peek
          endWhile
          n /= 10.0^decimal_digits
        endIf
      endIf

      return YSNumber(n)
endClass

class YSNativeCall( YSCmd cmd ) : YSCmd
  PROPERTIES
    arg_expressions : YSNativeCallArg[]
    arg_values      : YSArgs

  METHODS
    method add_arg( String id, YSCmd expression )
      if (arg_expressions is null)
        arg_expressions = YSNativeCallArg[](1)
        arg_values = YSArgs()
      endIf
      arg_expressions.add( YSNativeCallArg(this, id, expression) )

    method push
      YS.push_cmd( this )
      if (arg_expressions?)
        forEach (arg in arg_expressions) arg.push
      endIf

    method execute.Logical
      return cmd.execute( arg_values )
endClass

class YSNativeCallArg( YSNativeCall owner, String id, YSCmd expression ) : YSCmd
  METHODS
    method push
      YS.push_cmd( this )
      expression.push

    method execute.Logical
      owner.arg_values[id] = YS.pop
      return true
endClass

class YSArgs : StringIDAccess
  PROPERTIES
    _data() : HashTable<<String,YSValue>>

  METHODS
    method set( String id, YSValue value )
      _data[id] = value

    method get( String id ).YSValue
      return _data[id]
endClass

#{
class YSProperties
endClass

singleton class YSRuntime
  PROPERTIES

  METHODS
    method init
      YSType( "Global" )
endClass

class YSMethod
  PROPERTIES
    name       : String
    statements() : YSInstruction[]

  METHODS
    method init( name )
      name .= consolidate

    method add( YSInstruction cmd )
      statements.add( cmd )

endClass

class YSValue
endClass

class YSNumber : YSValue
  PROPERTIES
    value : Real64

  METHODS
    method init( value )

    method to_String.String
      return ""+value
endClass

class YSType
  PROPERTIES
    name : String

  METHODS
    method init( name )
      name .= consolidate
      YSRuntime.types[name] = this
endClass

}#

#{
singleton class Script
  METHODS
    method load( File file )
      if (not file.exists)
        println( "No such file: " + file.filepath )
        return
      endIf

      local Entity entity
      local MethodInfo cur_method
      local Scanner scanner( file )
      while (scanner.has_another)
        if (scanner.consume('#')) scanner.scan_line; nextIteration
        if (scanner.consume_eols) nextIteration

        if (scanner.consume('>'))
          if (scanner.consume("start "))
            Game.starting_room = scanner.scan_id.consolidate
            nextIteration
          endIf
          throw_error( scanner, file.filepath )
        endIf

        if (scanner.consume("room "))
          local var id = scanner.scan_id
          entity = Entity( type_room, id)
          Game.entities[entity.name] = entity
          if (scanner.consume(':'))
            entity.base_type = UnresolvedEntityRef( scanner.scan_id )
          endIf
          nextIteration
        elseIf (entity is null)
          throw Error( "'room', 'prop', 'item', or 'actor' expected." );
        endIf

        if (scanner.consume('.'))
          local var name = scanner.scan_id
          if (scanner.next_is_String)
            entity.properties.add( StringPropertyInfo(name,scanner.scan_String) )
          elseIf (scanner.next_is_Real64)
            entity.properties.add( NumberPropertyInfo(name,scanner.scan_Real64) )
          elseIf (scanner.consume("true"))
            entity.properties.add( NumberPropertyInfo(name,true) )
          elseIf (scanner.consume("false"))
            entity.properties.add( NumberPropertyInfo(name,true) )
          elseIf (not scanner.consume_eol)
            throw_error( scanner, file.filepath )
          endIf
          nextIteration
        endIf

        if (not scanner.next_is_id)
          throw_error( scanner, file.filepath )
        endIf

        if (scanner.consume("method "))
          local var id = scanner.scan_id
          cur_method = MethodInfo( id )
          entity.methods.add( cur_method )
          nextIteration
        endIf

        local var pos = scanner.src.cur_pos
        local var id = scanner.scan_id
        if (cur_method is null)
          throw_error( scanner, file.filepath )

        else
          which (id)
            case "action"
              id = scanner.scan_id
              scanner.must_consume(',')
              local var text = scanner.scan_String
              cur_method.add( CmdActionDef(id,text) )
              nextIteration

            case "align"
              local var alignment = scanner.scan_id
              if (alignment == "bottom")
                cur_method.add( CmdStatement<<Game.align_bottom=true>>() )
              else
                cur_method.add( CmdStatement<<Game.align_bottom=false>>() )
              endIf
              nextIteration

            case "clear"
              cur_method.add( CmdStatement<<Game.clear_text>>() )
              nextIteration

            case "newbox"
              cur_method.add( CmdStatement<<Game.newbox>>() )
              nextIteration

            case "print"
              if (scanner.next_is_String)
                local var mesg = scanner.scan_String
                cur_method.add( CmdPrint(mesg) )
                nextIteration
              endIf

            case "println"
              if (scanner.next_is_String)
                local var mesg = scanner.scan_String
                cur_method.add( CmdPrint(mesg+"\n") )
                nextIteration
              endIf

            case "prior"
              id = scanner.scan_id
              cur_method.add( CmdPriorCall(id) )
              nextIteration

            case "trace"
              if (scanner.next_is_String)
                local var mesg = scanner.scan_String
                cur_method.add( CmdTraceString(mesg) )
              else
                id = scanner.scan_id
                cur_method.add( CmdTraceProperty(id) )
              endIf
              nextIteration

            case "wait"
              local var seconds = scanner.scan_Real64
              cur_method.add( CmdWait(seconds*60) )
              nextIteration

            others
              # TODO
              #if (scanner.consume("="))
                #if (

              cur_method.add( CmdCall(id) )
              nextIteration
          endWhich
          
        endIf
      endWhile

      local var entries = Game.entities.entries
      forEach (index of entries)
        local var entry = entries[index]
        if (entry?) entry.value.resolve
      endForEach

    method throw_error( Scanner scanner, String filepath )
      local var pos = scanner.src.cur_pos
      throw Error( //Unrecognized syntax "$" at $ $.// (scanner.scan_line,filepath,pos) )
endClass

class EntityRef
  METHODS
    method resolve.EntityRef
    method entity.Entity
endClass

class UnresolvedEntityRef( String name ) : EntityRef
  METHODS
    method resolve.EntityRef
      local var entity = Game.entities[name]
      if (entity?) return ResolvedEntityRef(entity)
      return null

    method entity.Entity
      return Game.entities[name]
endClass

class ResolvedEntityRef( Entity entity ) : EntityRef
    method resolve.EntityRef
      return this

    method entity.Entity
      return &entity
endClass

class Entity
  ENUMERATE
    type_room, type_item

  PROPERTIES
    type         : Int32
    resolved     : Logical
    visited      : Logical
    name         : String
    base_type    : EntityRef
    properties() : PropertyInfo[]
    methods()    : MethodInfo[]
    cur_method   : MethodInfo

  METHODS
    method init( type, name )
      name = name.consolidate

    method resolve
      if (resolved) return
      resolved = true

      if (base_type is null)
        if (type == type_room and name != "Room")
          base_type = ResolvedEntityRef(Game.entities["Room"])
        endIf
      endIf

      if (base_type?)
        base_type .= resolve
        if (base_type?)
          local var base_entity = base_type.entity
          base_entity.resolve
          forEach (property in base_entity.properties)
            if (find_property(property.name) is null)
              properties.add( duplicate(property) )
            endIf
          endForEach
        endIf
      endIf

    method get( String property_name ).PropertyInfo
      local var result = find_property(property_name)
      if (result?) return result

      return NumberPropertyInfo(property_name,false)

    method call( String method_name ).CallInfo
      return call( this, method_name )

    method call( Entity context, String method_name ).CallInfo
      cur_method = find_method( method_name )
      if (cur_method?)
        local CallInfo info( context, cur_method )
        if (not info.finished) Game.call_stack.add( info ); return info
      endIf

      return null

    method find_property( String property_name ).PropertyInfo
      forEach (p in properties)
        if (p.name == property_name) return p
      endForEach
      return null

    method find_method( String method_name ).MethodInfo
      forEach (m in methods)
        if (m.name == method_name) return m
      endForEach

      if (base_type?)
        local var base_entity = base_type.entity
        if (base_entity?) return base_entity.find_method( method_name )
      endIf

      return null
endClass

class CallInfo
  PROPERTIES
    context  : Entity
    m        : MethodInfo
    ip       : Int32
    finished : Logical
    call_activate : Logical

  METHODS
    method init( context, m )
      call_activate = true
      execute
    
    method execute
      local var count = m.commands.count
      while (ip < count)
        local var cmd = m.commands[ip]

        if (call_activate) cmd.on_activate(this)
        else call_activate = true

        if (cmd.execute(this)) ++ip
        else call_activate=false; return
      endWhile
      finished = true

endClass

class PropertyInfo
  PROPERTIES
    name  : String

  METHODS
    method as_Real64.Real64
      throw UnsupportedMethodError()

    method as_Logical.Logical
      throw UnsupportedMethodError()

    method as_String.String
      throw UnsupportedMethodError()
endClass

class NumberPropertyInfo : PropertyInfo
  PROPERTIES
    value : Real64

  METHODS
    method init( name, value=0 )

    method init( name, Logical _value )
      if (_value) value = 1
      else        value = 0

    method create_duplicate.NumberPropertyInfo
      return NumberPropertyInfo( name, value )

    method as_Real64.Real64
      return value

    method as_Logical.Logical
      return value?

    method as_String.String
      return ""+value
endClass

class StringPropertyInfo: PropertyInfo
  PROPERTIES
    value : String

  METHODS
    method init( name, value="" )
      name = name.consolidate

    method create_duplicate.StringPropertyInfo
      return StringPropertyInfo( name, value )

    method as_Real64.Real64
      try
        return value.to_Real64
      catch (Error err)
        return 0
      endTry

    method as_Logical.Logical
      return value.count?

    method as_String.String
      return value
endClass

class MethodInfo
  PROPERTIES
    name       : String
    commands() : Cmd[]

  METHODS
    method init( name )
      name = name.consolidate

    method add( Cmd cmd )
      commands.add( cmd )

endClass

class Cmd
  METHODS
    method on_activate( CallInfo call_info )
    method execute( CallInfo call_info ).Logical
      return true
endClass

class CmdStatement<<$code>> : Cmd
  METHODS
    method on_activate( CallInfo call_info )
      $code
endClass

class CmdActionDef( String handler, String description ) : Cmd
endClass

class CmdCall : Cmd
  PROPERTIES
    name : String
    call : CallInfo

  METHODS
    method init( name )
      name = name.consolidate

    method on_activate( CallInfo call_info )
      call = call_info.context.call( name )

    method execute( CallInfo call_info ).Logical
      if (call?) return call.finished
      return true
endClass

class CmdPrint : Cmd
  PROPERTIES
    text : String

  METHODS
    method init( text )
    
    method execute( CallInfo call_info ).Logical
      Game.print( text )
      return true
endClass

class CmdPriorCall : Cmd
  PROPERTIES
    name : String
    call : CallInfo

  METHODS
    method init( name )
      name = name.consolidate

    method on_activate( CallInfo call_info )
      local var context = call_info.context
      if (context.base_type?)
        call = context.base_type.entity.call( context, name )
      endIf

    method execute( CallInfo call_info ).Logical
      if (call?) return call.finished
      return true
endClass

class CmdTraceString : Cmd
  PROPERTIES
    message : String

  METHODS
    method init( message )
    
    method execute( CallInfo call_info ).Logical
      println( message )
      return true
endClass

class CmdTraceProperty : Cmd
  PROPERTIES
    name     : String
    property : PropertyInfo

  METHODS
    method init( name )

    method on_activate( CallInfo call_info )
      if (property is null)
        if (name?) property = call_info.context.find_property( name )
        else       property = null
      endIf
    
      if (property?) println( property.as_String )
endClass

class CmdWait( Int32 ticks ) : Cmd
  PROPERTIES
    cur_ticks : Int32

  METHODS
    method on_activate( CallInfo call_info )
      cur_ticks = ticks

    method execute( CallInfo call_info ).Logical
      --cur_ticks
      return (cur_ticks <= 0)
endClass
}#

